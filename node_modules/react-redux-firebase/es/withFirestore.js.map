{"version":3,"sources":["../src/withFirestore.js"],"names":["withFirestore","WrappedComponent","WithFirestore","props","firebase","firestore","dispatch","displayName","wrappedComponent"],"mappings":"ixBAyDe,QAASA,CAAAA,aAAT,CAAuBC,gBAAvB,CAAyC,CAMtD,QAASC,CAAAA,aAAT,CAAuBC,KAAvB,CAA8B,CAC5B,MACE,8BAAC,kCAAD,CAA2B,QAA3B,MACG,SAAAC,QAAQ,QACP,8BAAC,8BAAD,CAAuB,QAAvB,MACG,SAAAC,SAAS,QACR,8BAAC,gBAAD,WACE,SAAS,CAAEA,SADb,CAEE,QAAQ,CAAED,QAFZ,CAGE,QAAQ,CAAEA,QAAQ,CAACE,QAHrB,EAIMH,KAJN,EADQ,CADZ,CADO,CADX,CAeH,CAKD,MAHAD,CAAAA,aAAa,CAACK,WAAd,CAA4B,2BAAgBN,gBAAhB,CAAkC,eAAlC,CAG5B,CAFAC,aAAa,CAACM,gBAAd,CAAiCP,gBAEjC,CAAO,kCAAaC,aAAb,CAA4BD,gBAA5B,CACR,C","sourcesContent":["import React from 'react'\nimport hoistStatics from 'hoist-non-react-statics'\nimport { wrapDisplayName } from './utils'\nimport ReactReduxFirebaseContext from './ReactReduxFirebaseContext'\nimport ReduxFirestoreContext from './ReduxFirestoreContext'\n\n/**\n * @augments React.Component\n * @description Higher Order Component that attaches `firestore`, `firebase`\n * and `dispatch` as props to React Components.\n * @param {React.Component} WrappedComponent - React component to wrap\n * @returns {Function} - Which accepts a component to wrap and returns the\n * wrapped component\n * @see http://react-redux-firebase.com/docs/api/withFirestore.html\n * @example <caption>Basic</caption>\n * import React from 'react'\n * import { withFirestore } from 'react-redux-firebase'\n *\n * function AddTodo({ firestore: { add } }) {\n *   return (\n *     <div>\n *       <button onClick={() => add('todos', { done: false, text: 'Sample' })}>\n *         Add Sample Todo\n *       </button>\n *     </div>\n *   )\n * }\n *\n * export default withFirestore(AddTodo)\n * @example <caption>Within HOC Composition</caption>\n * import React from 'react'\n * import { compose } from 'redux' // can also come from recompose\n * import { withHandlers } from 'recompose'\n * import { withFirestore } from 'react-redux-firebase'\n *\n * function AddTodo({ addTodo }) {\n *   return (\n *     <div>\n *       <button onClick={addTodo}>\n *         Add Sample Todo\n *       </button>\n *     </div>\n *   )\n * }\n *\n * const enhance = compose(\n *   withFirestore,\n *   withHandlers({\n *     addTodo: props => () => {\n *       const newTodo = { done: false, text: 'Sample' }\n *       return props.firestore.add({ collection: 'todos' }, newTodo)\n *     }\n *   })\n * )\n *\n * export default enhance(AddTodo)\n */\nexport default function withFirestore(WrappedComponent) {\n  /**\n   * WithFirebase wrapper component\n   * @param {object} props - Component props\n   * @returns {React.Component} WrappedComponent wrapped with firebase context\n   */\n  function WithFirestore(props) {\n    return (\n      <ReactReduxFirebaseContext.Consumer>\n        {firebase => (\n          <ReduxFirestoreContext.Consumer>\n            {firestore => (\n              <WrappedComponent\n                firestore={firestore}\n                firebase={firebase}\n                dispatch={firebase.dispatch}\n                {...props}\n              />\n            )}\n          </ReduxFirestoreContext.Consumer>\n        )}\n      </ReactReduxFirebaseContext.Consumer>\n    )\n  }\n\n  WithFirestore.displayName = wrapDisplayName(WrappedComponent, 'withFirestore')\n  WithFirestore.wrappedComponent = WrappedComponent\n\n  return hoistStatics(WithFirestore, WrappedComponent)\n}\n"],"file":"withFirestore.js"}