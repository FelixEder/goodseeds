{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.default = createFirebaseInstance, exports.getFirebase = getFirebase;\n\nvar _merge2 = _interopRequireDefault(require(\"lodash/fp/merge\")),\n    _isObject2 = _interopRequireDefault(require(\"lodash/isObject\")),\n    _utils = require(\"./utils\"),\n    _actions = require(\"./utils/actions\"),\n    authActions = _interopRequireWildcard(require(\"./actions/auth\")),\n    queryActions = _interopRequireWildcard(require(\"./actions/query\")),\n    storageActions = _interopRequireWildcard(require(\"./actions/storage\"));\n\nfunction _getRequireWildcardCache() {\n  if (\"function\" != typeof WeakMap) return null;\n  var cache = new WeakMap();\n  return _getRequireWildcardCache = function () {\n    return cache;\n  }, cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) return obj;\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) return cache.get(obj);\n  var newObj = {};\n\n  if (null != obj) {\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n    for (var key in obj) if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      desc && (desc.get || desc.set) ? Object.defineProperty(newObj, key, desc) : newObj[key] = obj[key];\n    }\n  }\n\n  return newObj.default = obj, cache && cache.set(obj, newObj), newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var source, i = 1; i < arguments.length; i++) source = null == arguments[i] ? {} : arguments[i], i % 2 ? ownKeys(source, !0).forEach(function (key) {\n    _defineProperty(target, key, source[key]);\n  }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(source).forEach(function (key) {\n    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n  });\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  return key in obj ? Object.defineProperty(obj, key, {\n    value: value,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : obj[key] = value, obj;\n}\n\nvar firebaseInstance;\n\nfunction createFirebaseInstance(firebase, configs, dispatch) {\n  configs.enableLogging && firebase.database && \"function\" == typeof firebase.database.enableLogging && firebase.database.enableLogging(configs.enableLogging);\n  firebase._ = (0, _merge2.default)({\n    watchers: {},\n    listeners: {},\n    callbacks: {},\n    queries: {},\n    config: configs,\n    authUid: null\n  }, firebase._);\n\n  var withMeta = function (method, path, value, onComplete) {\n    if ((0, _isObject2.default)(value)) {\n      var prefix = \"update\" === method ? \"updated\" : \"created\",\n          dataWithMeta = _objectSpread({}, value, _defineProperty({}, \"\".concat(prefix, \"At\"), firebase.database.ServerValue.TIMESTAMP));\n\n      return firebase.auth().currentUser && (dataWithMeta[\"\".concat(prefix, \"By\")] = firebase.auth().currentUser.uid), firebase.database().ref(path)[method](dataWithMeta, onComplete);\n    }\n\n    return firebase.database().ref(path)[method](value, onComplete);\n  },\n      actionCreators = (0, _actions.mapWithFirebaseAndDispatch)(firebase, dispatch, {\n    signInWithPhoneNumber: authActions.signInWithPhoneNumber\n  }, {\n    initializeAuth: authActions.init\n  });\n\n  return firebaseInstance = Object.assign(firebase, _objectSpread({\n    _reactReduxFirebaseExtended: !0,\n    ref: function ref(path) {\n      return firebase.database().ref(path);\n    },\n    set: function set(path, value, onComplete) {\n      return firebase.database().ref(path).set(value, onComplete);\n    },\n    setWithMeta: function setWithMeta(path, value, onComplete) {\n      return withMeta(\"set\", path, value, onComplete);\n    },\n    uniqueSet: function uniqueSet(path, value, onComplete) {\n      return firebase.database().ref(path).transaction(function (d) {\n        return null === d ? value : void 0;\n      }).then(function (_ref) {\n        var committed = _ref.committed,\n            snapshot = _ref.snapshot;\n\n        if (!committed) {\n          var newError = new Error(\"Path already exists.\");\n          return onComplete && onComplete(newError), Promise.reject(newError);\n        }\n\n        return onComplete && onComplete(snapshot), snapshot;\n      });\n    },\n    push: function push(path, value, onComplete) {\n      return firebase.database().ref(path).push(value, onComplete);\n    },\n    pushWithMeta: function pushWithMeta(path, value, onComplete) {\n      return withMeta(\"push\", path, value, onComplete);\n    },\n    remove: function remove(path, onComplete, options) {\n      return queryActions.remove(firebase, dispatch, path, options).then(function () {\n        return \"function\" == typeof onComplete && onComplete(), path;\n      });\n    },\n    update: function update(path, value, onComplete) {\n      return firebase.database().ref(path).update(value, onComplete);\n    },\n    updateWithMeta: function updateWithMeta(path, value, onComplete) {\n      return withMeta(\"update\", path, value, onComplete);\n    },\n    login: function login(credentials) {\n      return authActions.login(dispatch, firebase, credentials);\n    },\n    reauthenticate: function reauthenticate(credentials) {\n      return authActions.reauthenticate(dispatch, firebase, credentials);\n    },\n    handleRedirectResult: function handleRedirectResult(authData) {\n      return authActions.handleRedirectResult(dispatch, firebase, authData);\n    },\n    logout: function logout() {\n      return authActions.logout(dispatch, firebase);\n    },\n    updateAuth: function updateAuth(authUpdate, updateInProfile) {\n      return authActions.updateAuth(dispatch, firebase, authUpdate, updateInProfile);\n    },\n    updateEmail: function updateEmail(newEmail, updateInProfile) {\n      return authActions.updateEmail(dispatch, firebase, newEmail, updateInProfile);\n    },\n    updateProfile: function updateProfile(profileUpdate, options) {\n      return authActions.updateProfile(dispatch, firebase, profileUpdate, options);\n    },\n    uploadFile: function uploadFile(path, file, dbPath, options) {\n      return storageActions.uploadFile(dispatch, firebase, {\n        path: path,\n        file: file,\n        dbPath: dbPath,\n        options: options\n      });\n    },\n    uploadFiles: function uploadFiles(path, files, dbPath, options) {\n      return storageActions.uploadFiles(dispatch, firebase, {\n        path: path,\n        files: files,\n        dbPath: dbPath,\n        options: options\n      });\n    },\n    deleteFile: function deleteFile(path, dbPath) {\n      return storageActions.deleteFile(dispatch, firebase, {\n        path: path,\n        dbPath: dbPath\n      });\n    },\n    createUser: function createUser(credentials, profile) {\n      return authActions.createUser(dispatch, firebase, credentials, profile);\n    },\n    resetPassword: function resetPassword(email) {\n      return authActions.resetPassword(dispatch, firebase, email);\n    },\n    confirmPasswordReset: function confirmPasswordReset(code, password) {\n      return authActions.confirmPasswordReset(dispatch, firebase, code, password);\n    },\n    verifyPasswordResetCode: function verifyPasswordResetCode(code) {\n      return authActions.verifyPasswordResetCode(dispatch, firebase, code);\n    },\n    watchEvent: function watchEvent(type, path, storeAs) {\n      var options = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : {};\n      return queryActions.watchEvent(firebase, dispatch, _objectSpread({\n        type: type,\n        path: path,\n        storeAs: storeAs\n      }, options));\n    },\n    unWatchEvent: function unWatchEvent(type, path, queryId) {\n      var options = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : {};\n      return queryActions.unWatchEvent(firebase, dispatch, _objectSpread({\n        type: type,\n        path: path,\n        queryId: queryId\n      }, options));\n    },\n    reloadAuth: function reloadAuth() {\n      return authActions.reloadAuth(dispatch, firebase);\n    },\n    linkWithCredential: function linkWithCredential(credential) {\n      return authActions.linkWithCredential(dispatch, firebase, credential);\n    },\n    promiseEvents: function promiseEvents(watchArray, options) {\n      var inputAsFunc = (0, _utils.createCallable)(watchArray),\n          prevData = inputAsFunc(options, firebase),\n          queryConfigs = (0, _utils.getEventsFromInput)(prevData);\n      return Promise.all(queryConfigs.map(function (queryConfig) {\n        return queryActions.watchEvent(firebase, dispatch, queryConfig);\n      }));\n    },\n    dispatch: dispatch\n  }, actionCreators)), firebaseInstance;\n}\n\nfunction getFirebase() {\n  if (!firebaseInstance) throw new Error(\"Firebase instance does not yet exist. Check your compose function.\");\n  return firebaseInstance;\n}","map":{"version":3,"sources":["../src/createFirebaseInstance.js"],"names":["configs","firebase","watchers","listeners","callbacks","queries","config","authUid","withMeta","prefix","dataWithMeta","currentUser","uid","set","setWithMeta","push","pushWithMeta","update","updateWithMeta","remove","queryActions","onComplete","path","uniqueSet","committed","snapshot","newError","Promise","uploadFile","storageActions","file","dbPath","options","uploadFiles","files","deleteFile","watchEvent","type","storeAs","unWatchEvent","queryId","promiseEvents","inputAsFunc","prevData","queryConfigs","login","authActions","reauthenticate","handleRedirectResult","logout","createUser","resetPassword","confirmPasswordReset","verifyPasswordResetCode","updateProfile","updateAuth","updateEmail","reloadAuth","linkWithCredential","actionCreators","signInWithPhoneNumber","initializeAuth","firebaseInstance","Object","_reactReduxFirebaseExtended","ref","dispatch"],"mappings":"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","sourcesContent":["import { isObject } from 'lodash'\nimport { merge } from 'lodash/fp'\nimport { getEventsFromInput, createCallable } from './utils'\nimport { mapWithFirebaseAndDispatch } from './utils/actions'\nimport * as authActions from './actions/auth'\nimport * as queryActions from './actions/query'\nimport * as storageActions from './actions/storage'\n\nlet firebaseInstance\n\n/**\n * Create an extended firebase instance that has methods attached\n * which dispatch redux actions.\n * @param {object} firebase - Firebase instance which to extend\n * @param {object} configs - Configuration object\n * @param {Function} dispatch - Action dispatch function\n * @returns {object} Extended Firebase instance\n */\nexport default function createFirebaseInstance(firebase, configs, dispatch) {\n  /* istanbul ignore next: Logging is external */\n  // Enable Logging based on config (handling instances without i.e RNFirebase)\n  if (\n    configs.enableLogging &&\n    firebase.database &&\n    typeof firebase.database.enableLogging === 'function'\n  ) {\n    firebase.database.enableLogging(configs.enableLogging)\n  }\n\n  // Add internal variables to firebase instance\n  const defaultInternals = {\n    watchers: {},\n    listeners: {},\n    callbacks: {},\n    queries: {},\n    config: configs,\n    authUid: null\n  }\n\n  firebase._ = merge(defaultInternals, firebase._) // eslint-disable-line no-param-reassign\n\n  /**\n   * @private\n   * Calls a method and attaches meta to value object\n   * @param {string} method - Method to run with meta attached\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {object|string|boolean|number} value - Value to write to Firebase\n   * @param {Function} onComplete - Function to run on complete\n   * @returns {Promise} Containing reference snapshot\n   */\n  const withMeta = (method, path, value, onComplete) => {\n    if (isObject(value)) {\n      const prefix = method === 'update' ? 'updated' : 'created'\n      const dataWithMeta = {\n        ...value,\n        [`${prefix}At`]: firebase.database.ServerValue.TIMESTAMP\n      }\n      if (firebase.auth().currentUser) {\n        dataWithMeta[`${prefix}By`] = firebase.auth().currentUser.uid\n      }\n      return firebase\n        .database()\n        .ref(path)\n        [method](dataWithMeta, onComplete)\n    }\n    return firebase\n      .database()\n      .ref(path)\n      [method](value, onComplete)\n  }\n\n  /**\n   * Sets data to Firebase.\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {object|string|boolean|number} value - Value to write to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @returns {Promise} Containing reference snapshot\n   * @example <caption>Basic</caption>\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#set\n   * import React, { Component } from 'react'\n   * import PropTypes from 'prop-types'\n   * import { firebaseConnect } from 'react-redux-firebase'\n   * function Example({ firebase: { set } }) {\n   *   return (\n   *     <button onClick={() => set('some/path', { here: 'is a value' })}>\n   *     Set To Firebase\n   *     </button>\n   *   )\n   * }\n   * export default firebaseConnect()(Example)\n   */\n  const set = (path, value, onComplete) =>\n    firebase\n      .database()\n      .ref(path)\n      .set(value, onComplete)\n\n  /**\n   * Sets data to Firebase along with meta data. Currently,\n   * this includes createdAt and createdBy. *Warning* using this function\n   * may have unintented consequences (setting createdAt even if data already\n   * exists).\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {object|string|boolean|number} value - Value to write to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @returns {Promise} Containing reference snapshot\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#update\n   */\n  const setWithMeta = (path, value, onComplete) =>\n    withMeta('set', path, value, onComplete)\n\n  /**\n   * Pushes data to Firebase.\n   * @param {string} path - Path to location on Firebase which to push\n   * @param {object|string|boolean|number} value - Value to push to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @returns {Promise} Containing reference snapshot\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#push\n   * @example <caption>Basic</caption>\n   * import React from 'react'\n   * import PropTypes from 'prop-types'\n   * import { firebaseConnect } from 'react-redux-firebase'\n   *\n   * function Example({ firebase: { push } }) {\n   *   return (\n   *     <button onClick={() => push('some/path', true)}>\n   *       Push To Firebase\n   *     </button>\n   *   )\n   * }\n   * export default firebaseConnect()(Example)\n   */\n  const push = (path, value, onComplete) =>\n    firebase\n      .database()\n      .ref(path)\n      .push(value, onComplete)\n\n  /**\n   * Pushes data to Firebase along with meta data. Currently,\n   * this includes createdAt and createdBy.\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {object|string|boolean|number} value - Value to write to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @returns {Promise} Containing reference snapshot\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#pushwithmeta\n   */\n  const pushWithMeta = (path, value, onComplete) =>\n    withMeta('push', path, value, onComplete)\n\n  /**\n   * Updates data on Firebase and sends new data. More info\n   * available in [the docs](https://react-redux-firebase.com/docs/api/firebaseInstance.html#update).\n   * @param {string} path - Path to location on Firebase which to update\n   * @param {object|string|boolean|number} value - Value to update to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @returns {Promise} Containing reference snapshot\n   * @example <caption>Basic</caption>\n   * import React from 'react'\n   * import PropTypes from 'prop-types'\n   * import { firebaseConnect } from 'react-redux-firebase'\n   *\n   * function Example({ firebase: { update } }) {\n   *   function updateData() {\n   *     update('some/path', { here: 'is a value' })\n   *   }\n   * }\n   *   return (\n   *     <button onClick={updateData}>\n   *       Update To Firebase\n   *     </button>\n   *   )\n   * }\n   * export default firebaseConnect()(Example)\n   */\n  const update = (path, value, onComplete) =>\n    firebase\n      .database()\n      .ref(path)\n      .update(value, onComplete)\n\n  /**\n   * Updates data on Firebase along with meta. *Warning*\n   * using this function may have unintented consequences (setting\n   * createdAt even if data already exists).\n   * @param {string} path - Path to location on Firebase which to update\n   * @param {object|string|boolean|number} value - Value to update to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @returns {Promise} Containing reference snapshot\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#updatewithmeta\n   */\n  const updateWithMeta = (path, value, onComplete) =>\n    withMeta('update', path, value, onComplete)\n\n  /**\n   * Removes data from Firebase at a given path. **NOTE** A\n   * seperate action is not dispatched unless `dispatchRemoveAction: true` is\n   * provided to config on store creation. That means that a listener must\n   * be attached in order for state to be updated when calling remove.\n   * @param {string} path - Path to location on Firebase which to remove\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @param {Function} options - Options object\n   * @returns {Promise} Containing reference snapshot\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#remove\n   * @example <caption>Basic</caption>\n   * import React from 'react'\n   * import PropTypes from 'prop-types'\n   * import { firebaseConnect } from 'react-redux-firebase'\n   *\n   * function Example({ firebase: { remove } }) {\n   *   return (\n   *     <button onClick={() => remove('some/path')}>\n   *       Remove From Firebase\n   *     </button>\n   *   )\n   * }\n   * export default firebaseConnect()(Example)\n   */\n  const remove = (path, onComplete, options) =>\n    queryActions.remove(firebase, dispatch, path, options).then(() => {\n      if (typeof onComplete === 'function') onComplete()\n      return path\n    })\n\n  /**\n   * Sets data to Firebase only if the path does not already\n   * exist, otherwise it rejects. Internally uses a Firebase transaction to\n   * prevent a race condition between seperate clients calling uniqueSet.\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {object|string|boolean|number} value - Value to write to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @returns {Promise} Containing reference snapshot\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#uniqueset\n   * @example <caption>Basic</caption>\n   * import React, { Component } from 'react'\n   * import PropTypes from 'prop-types'\n   * import { firebaseConnect } from 'react-redux-firebase'\n   *\n   * function Example({ firebase: { uniqueSet } }) {\n   *   return (\n   *     <button onClick={() => uniqueSet('some/unique/path', true)}>\n   *       Unique Set To Firebase\n   *     </button>\n   *   )\n   * }\n   * export default firebaseConnect()(Example)\n   */\n  const uniqueSet = (path, value, onComplete) =>\n    firebase\n      .database()\n      .ref(path)\n      .transaction(d => (d === null ? value : undefined))\n      .then(({ committed, snapshot }) => {\n        if (!committed) {\n          const newError = new Error('Path already exists.')\n          if (onComplete) onComplete(newError)\n          return Promise.reject(newError)\n        }\n        if (onComplete) onComplete(snapshot)\n        return snapshot\n      })\n\n  /**\n   * Upload a file to Firebase Storage with the option to store\n   * its metadata in Firebase Database. More info available\n   * in [the docs]().\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {File} file - File object to upload (usually first element from\n   * array output of select-file or a drag/drop `onDrop`)\n   * @param {string} dbPath - Database path to place uploaded file metadata\n   * @param {object} options - Options\n   * @param {string} options.name - Name of the file\n   * @param {object} options.metdata - Metadata for the file (passed as second\n   * argument to storage.put calls)\n   * @returns {Promise} Containing the File object\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#uploadfile\n   */\n  const uploadFile = (path, file, dbPath, options) =>\n    storageActions.uploadFile(dispatch, firebase, {\n      path,\n      file,\n      dbPath,\n      options\n    })\n\n  /**\n   * Upload multiple files to Firebase Storage with the option\n   * to store their metadata in Firebase Database.\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {Array} files - Array of File objects to upload (usually from\n   * a select-file or a drag/drop `onDrop`)\n   * @param {string} dbPath - Database path to place uploaded files metadata.\n   * @param {object} options - Options\n   * @param {string} options.name - Name of the file\n   * @returns {Promise} Containing an array of File objects\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#uploadfiles\n   */\n  const uploadFiles = (path, files, dbPath, options) =>\n    storageActions.uploadFiles(dispatch, firebase, {\n      path,\n      files,\n      dbPath,\n      options\n    })\n\n  /**\n   * Delete a file from Firebase Storage with the option to\n   * remove its metadata in Firebase Database.\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {string} dbPath - Database path to place uploaded file metadata\n   * @returns {Promise} Containing the File object\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#deletefile\n   */\n  const deleteFile = (path, dbPath) =>\n    storageActions.deleteFile(dispatch, firebase, { path, dbPath })\n\n  /**\n   * Watch event. **Note:** this method is used internally\n   * so examples have not yet been created, and it may not work as expected.\n   * @param {string} type - Type of watch event\n   * @param {string} path - Path to location on Firebase which to set listener\n   * @param {string} storeAs - Name of listener results within redux store\n   * @param {object} options - Event options object\n   * @param {Array} options.queryParams - List of parameters for the query\n   * @param {string} options.queryId - id of the query\n   * @returns {Promise|void} Results of calling watch event\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#watchevent\n   */\n  const watchEvent = (type, path, storeAs, options = {}) =>\n    queryActions.watchEvent(firebase, dispatch, {\n      type,\n      path,\n      storeAs,\n      ...options\n    })\n\n  /**\n   * Unset a listener watch event. **Note:** this method is used\n   * internally so examples have not yet been created, and it may not work\n   * as expected.\n   * @param {string} type - Type of watch event\n   * @param {string} path - Path to location on Firebase which to unset listener\n   * @param {string} queryId - Id of the listener\n   * @param {object} options - Event options object\n   * @returns {void}\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#unwatchevent\n   */\n  const unWatchEvent = (type, path, queryId, options = {}) =>\n    queryActions.unWatchEvent(firebase, dispatch, {\n      type,\n      path,\n      queryId,\n      ...options\n    })\n\n  /**\n   * Similar to the firebaseConnect Higher Order Component but\n   * presented as a function (not a React Component). Useful for populating\n   * your redux state without React, e.g., for server side rendering. Only\n   * `once` type should be used as other query types such as `value` do not\n   * return a Promise.\n   * @param {Array} watchArray - Array of objects or strings for paths to sync\n   * from Firebase. Can also be a function that returns the array. The function\n   * is passed the props object specified as the next parameter.\n   * @param {object} options - The options object that you would like to pass to\n   * your watchArray generating function.\n   * @returns {Promise} Resolves with an array of watchEvent results\n   */\n  const promiseEvents = (watchArray, options) => {\n    const inputAsFunc = createCallable(watchArray)\n    const prevData = inputAsFunc(options, firebase)\n    const queryConfigs = getEventsFromInput(prevData)\n    // TODO: Handle calling with non promise queries (must be once or first_child)\n    return Promise.all(\n      queryConfigs.map(queryConfig =>\n        queryActions.watchEvent(firebase, dispatch, queryConfig)\n      )\n    )\n  }\n\n  /**\n   * Logs user into Firebase. For examples, visit the\n   * [auth section of the docs](https://react-redux-firebase.com/docs/auth.html) or the\n   * [auth recipes section](https://react-redux-firebase.com/docs/recipes/auth.html).\n   * @param {object} credentials - Credentials for authenticating\n   * @param {string} credentials.provider - External provider (google |\n   * facebook | twitter)\n   * @param {string} credentials.type - Type of external authentication\n   * (popup | redirect) (only used with provider)\n   * @param {string} credentials.email - Credentials for authenticating\n   * @param {string} credentials.password - Credentials for authenticating (only used with email)\n   * @returns {Promise} Containing user's auth data\n   * @see https://react-redux-firebase.com/docs/auth.html#logincredentials\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#login\n   */\n  const login = credentials =>\n    authActions.login(dispatch, firebase, credentials)\n\n  /**\n   * Reauthenticate user into Firebase. For examples, visit the\n   * [auth section of the docs](https://react-redux-firebase.com/docs/auth.html) or the\n   * [auth recipes section](https://react-redux-firebase.com/docs/recipes/auth.html).\n   * @param {object} credentials - Credentials for authenticating\n   * @param {string} credentials.provider - External provider (google |\n   * facebook | twitter)\n   * @param {string} credentials.type - Type of external authentication\n   * (popup | redirect) (only used with provider)\n   * @returns {Promise} Containing user's auth data\n   * @see https://react-redux-firebase.com/docs/auth.html#logincredentials\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#login\n   */\n  const reauthenticate = credentials =>\n    authActions.reauthenticate(dispatch, firebase, credentials)\n\n  /**\n   * Logs user into Firebase using external. For examples, visit the\n   * [auth section](/docs/recipes/auth.md)\n   * @param {object} authData - Auth data from Firebase's getRedirectResult\n   * @returns {Promise} Containing user's profile\n   */\n  const handleRedirectResult = authData =>\n    authActions.handleRedirectResult(dispatch, firebase, authData)\n\n  /**\n   * Logs user out of Firebase and empties firebase state from\n   * redux store\n   * @returns {Promise} Resolves after logout is complete\n   * @see https://react-redux-firebase.com/docs/auth.html#logout\n   */\n  const logout = () => authActions.logout(dispatch, firebase)\n\n  /**\n   * Creates a new user in Firebase authentication. If\n   * `userProfile` config option is set, user profiles will be set to this\n   * location.\n   * @param {object} credentials - Credentials for authenticating\n   * @param {string} credentials.email - Credentials for authenticating\n   * @param {string} credentials.password - Credentials for authenticating (only used with email)\n   * @param {object} profile - Data to include within new user profile\n   * @returns {Promise} Containing user's auth data\n   * @see https://react-redux-firebase.com/docs/auth.html#createuser\n   */\n  const createUser = (credentials, profile) =>\n    authActions.createUser(dispatch, firebase, credentials, profile)\n\n  /**\n   * Sends password reset email\n   * @param {string} email - Email to send recovery email to\n   * @returns {Promise} Resolves after password reset email is sent\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#resetpassword\n   */\n  const resetPassword = email =>\n    authActions.resetPassword(dispatch, firebase, email)\n\n  /**\n   * Confirm that a user's password has been reset\n   * @param {string} code - Password reset code to verify\n   * @param {string} password - New Password to confirm reset to\n   * @returns {Promise} Resolves after password reset is confirmed\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#confirmpasswordreset\n   */\n  const confirmPasswordReset = (code, password) =>\n    authActions.confirmPasswordReset(dispatch, firebase, code, password)\n\n  /**\n   * Verify that a password reset code from a password reset\n   * email is valid\n   * @param {string} code - Password reset code to verify\n   * @returns {Promise} Containing user auth info\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#verifypasswordreset\n   */\n  const verifyPasswordResetCode = code =>\n    authActions.verifyPasswordResetCode(dispatch, firebase, code)\n\n  /**\n   * Update user profile on Firebase Real Time Database or\n   * Firestore (if `useFirestoreForProfile: true` config included).\n   * Real Time Database update uses `update` method internally while\n   * updating profile on Firestore uses `set`.\n   * @param {object} profileUpdate - Profile data to place in new profile\n   * @param {object} options - Options object (used to change how profile\n   * update occurs)\n   * @param {boolean} [options.useSet=true] - Use set with merge instead of\n   * update. Setting to `false` uses update (can cause issue of profile document\n   * does not exist). Note: Only used when updating profile on Firestore\n   * @param {boolean} [options.merge=true] - Whether or not to use merge when\n   * setting profile. Note: Only used when updating profile on Firestore\n   * @returns {Promise} Returns after updating profile within database\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#updateprofile\n   */\n  const updateProfile = (profileUpdate, options) =>\n    authActions.updateProfile(dispatch, firebase, profileUpdate, options)\n\n  /**\n   * Update Auth profile object\n   * @param {object} authUpdate - Update to be auth object\n   * @param {boolean} updateInProfile - Update in profile\n   * @returns {Promise} Returns after updating auth profile\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#updateauth\n   */\n  const updateAuth = (authUpdate, updateInProfile) =>\n    authActions.updateAuth(dispatch, firebase, authUpdate, updateInProfile)\n\n  /**\n   * Update user's email\n   * @param {string} newEmail - Update to be auth object\n   * @param {boolean} updateInProfile - Update in profile\n   * @returns {Promise} Resolves after email is updated in user's auth\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#updateemail\n   */\n  const updateEmail = (newEmail, updateInProfile) =>\n    authActions.updateEmail(dispatch, firebase, newEmail, updateInProfile)\n\n  /**\n   * Reload user's auth object. Must be authenticated.\n   * @returns {Promise} Resolves after reloading firebase auth\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#reloadauth\n   */\n  const reloadAuth = () => authActions.reloadAuth(dispatch, firebase)\n\n  /**\n   * Links the user account with the given credentials.\n   * @param {firebase.auth.AuthCredential} credential - The auth credential\n   * @returns {Promise} Resolves after linking auth with a credential\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#linkwithcredential\n   */\n  const linkWithCredential = credential =>\n    authActions.linkWithCredential(dispatch, firebase, credential)\n\n  /**\n   * @name signInWithPhoneNumber\n   * Asynchronously signs in using a phone number. This method\n   * sends a code via SMS to the given phone number, and returns a modified\n   * firebase.auth.ConfirmationResult. The `confirm` method\n   * authenticates and does profile handling.\n   * @param {firebase.auth.ConfirmationResult} credential - The auth credential\n   * @returns {Promise}\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#signinwithphonenumber\n   */\n\n  /**\n   * @name initializeAuth\n   * Initialize auth to work with build in profile support\n   */\n  const actionCreators = mapWithFirebaseAndDispatch(\n    firebase,\n    dispatch,\n    // Actions with arg order (firebase, dispatch)\n    {\n      signInWithPhoneNumber: authActions.signInWithPhoneNumber\n    },\n    // Actions with arg order (dispatch, firebase)\n    {\n      initializeAuth: authActions.init\n    }\n  )\n\n  /**\n   * @name ref\n   * @description Firebase ref function\n   * @returns {firebase.database.Reference}\n   */\n  /**\n   * @name database\n   * @description Firebase database service instance including all Firebase storage methods\n   * @returns {firebase.database.Database} Firebase database service\n   */\n  /**\n   * @name storage\n   * @description Firebase storage service instance including all Firebase storage methods\n   * @returns {firebase.database.Storage} Firebase storage service\n   */\n  /**\n   * @name auth\n   * @description Firebase auth service instance including all Firebase auth methods\n   * @returns {firebase.database.Auth}\n   */\n  firebaseInstance = Object.assign(firebase, {\n    _reactReduxFirebaseExtended: true,\n    ref: path => firebase.database().ref(path),\n    set,\n    setWithMeta,\n    uniqueSet,\n    push,\n    pushWithMeta,\n    remove,\n    update,\n    updateWithMeta,\n    login,\n    reauthenticate,\n    handleRedirectResult,\n    logout,\n    updateAuth,\n    updateEmail,\n    updateProfile,\n    uploadFile,\n    uploadFiles,\n    deleteFile,\n    createUser,\n    resetPassword,\n    confirmPasswordReset,\n    verifyPasswordResetCode,\n    watchEvent,\n    unWatchEvent,\n    reloadAuth,\n    linkWithCredential,\n    promiseEvents,\n    dispatch,\n    ...actionCreators\n  })\n  return firebaseInstance\n}\n\n/**\n * Get internal Firebase instance with methods which are wrapped with action dispatches. Useful for\n * integrations into external libraries such as redux-thunk and redux-observable.\n * @returns {object} Firebase instance with methods which dispatch redux actions\n * @see http://react-redux-firebase.com/api/getFirebase.html\n * @example <caption>redux-thunk integration</caption>\n * import { applyMiddleware, compose, createStore } from 'redux';\n * import thunk from 'redux-thunk';\n * import { getFirebase } from 'react-redux-firebase';\n * import makeRootReducer from './reducers';\n *\n * const fbConfig = {} // your firebase config\n *\n * const store = createStore(\n *   makeRootReducer(),\n *   initialState,\n *   compose(\n *     applyMiddleware([\n *       // Pass getFirebase function as extra argument\n *       thunk.withExtraArgument(getFirebase)\n *     ])\n *   )\n * );\n * // then later\n * export function addTodo(newTodo) {\n *   return (dispatch, getState, getFirebase) => {\n *     const firebase = getFirebase()\n *     firebase\n *       .push('todos', newTodo)\n *       .then(() => {\n *         dispatch({ type: 'SOME_ACTION' })\n *       })\n *   }\n * }\n */\nexport function getFirebase() {\n  /* istanbul ignore next: Firebase instance always exists during tests */\n  if (!firebaseInstance) {\n    throw new Error(\n      'Firebase instance does not yet exist. Check your compose function.'\n    ) // eslint-disable-line no-console\n  }\n  return firebaseInstance\n}\n"]},"metadata":{},"sourceType":"script"}