{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.isString = isString, exports.createCallable = createCallable, exports.invokeArrayQuery = invokeArrayQuery, exports.wrapDisplayName = wrapDisplayName, exports.getChanges = getChanges, Object.defineProperty(exports, \"getEventsFromInput\", {\n  enumerable: !0,\n  get: function get() {\n    return _events.getEventsFromInput;\n  }\n});\n\nvar _filter2 = _interopRequireDefault(require(\"lodash/filter\")),\n    _some2 = _interopRequireDefault(require(\"lodash/some\")),\n    _isEqual2 = _interopRequireDefault(require(\"lodash/isEqual\")),\n    _constant2 = _interopRequireDefault(require(\"lodash/constant\")),\n    _events = require(\"./events\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction isString(varToCheck) {\n  return \"string\" == typeof varToCheck || varToCheck instanceof String;\n}\n\nfunction createCallable(f) {\n  return \"function\" == typeof f ? f : (0, _constant2.default)(f);\n}\n\nfunction invokeArrayQuery(f, props) {\n  var result = createCallable(f)(props);\n  return Array.isArray(result) ? result : result ? [result] : null;\n}\n\nfunction getDisplayName(Component) {\n  return \"string\" == typeof Component ? Component : Component ? Component.displayName || Component.name || \"Component\" : void 0;\n}\n\nfunction wrapDisplayName(BaseComponent, hocName) {\n  return \"\".concat(hocName, \"(\").concat(getDisplayName(BaseComponent), \")\");\n}\n\nfunction getChanges() {\n  var data = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : [],\n      prevData = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : [],\n      result = {};\n  return result.added = (0, _filter2.default)(data, function (d) {\n    return !(0, _some2.default)(prevData, function (p) {\n      return (0, _isEqual2.default)(d, p);\n    });\n  }), result.removed = (0, _filter2.default)(prevData, function (p) {\n    return !(0, _some2.default)(data, function (d) {\n      return (0, _isEqual2.default)(p, d);\n    });\n  }), result;\n}","map":{"version":3,"sources":["../../src/utils/index.js"],"names":["varToCheck","String","result","createCallable","Array","Component","getDisplayName","data","prevData"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAQO;;AAAA,SAAA,QAAA,CAAA,UAAA,EAA8B;AACnC,SAAO,YAAA,OAAA,UAAA,IAAkCA,UAAU,YAAYC,MAA/D;AASK;;AAAA,SAAA,cAAA,CAAA,CAAA,EAA2B;AAChC,SAAO,cAAA,OAAA,CAAA,GAAA,CAAA,GAA8B,CAAA,GAAA,UAAA,CAAA,OAAA,EAAA,CAAA,CAArC;AAUK;;AAAA,SAAA,gBAAA,CAAA,CAAA,EAAA,KAAA,EAAoC;AACzC,MAAMC,MAAM,GAAGC,cAAc,CAAdA,CAAc,CAAdA,CAAf,KAAeA,CAAf;AADyC,SAErCC,KAAK,CAALA,OAAAA,CAFqC,MAErCA,IAFqC,MAErCA,GAGCF,MALoC,GAQlC,CARkC,MAQlC,CARkC,GAMhC,IANgC;AAkB3C;;AAAA,SAAA,cAAA,CAAA,SAAA,EAAmC;AAAA,SAC7B,YAAA,OAD6B,SAC7B,GAD6B,SAC7B,GAICG,SAL4B,GAS1BA,SAAS,CAATA,WAAAA,IAAyBA,SAAS,CAAlCA,IAAAA,IAT0B,WAAA,GAAA,KAAA,CAAA;AAkB5B;;AAAA,SAAA,eAAA,CAAA,aAAA,EAAA,OAAA,EAAiD;AACtD,SAAA,GAAA,MAAA,CAAA,OAAA,EAAA,GAAA,EAAA,MAAA,CAAqBC,cAAc,CAAnC,aAAmC,CAAnC,EAAA,GAAA,CAAA;AASK;;AAAA,SAAA,UAAA,GAA8C;AAA1BC,MAAAA,IAA0B,GAAA,IAAA,SAAA,CAAA,MAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAnB,EAAPA;AAAAA,MAAWC,QAAe,GAAA,IAAA,SAAA,CAAA,MAAA,IAAA,KAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAtBD;AAAAA,MACnBL,MAAM,GADuC,EAA1BK;AAEzBL,SAAAA,MAAM,CAANA,KAAAA,GAAe,CAAA,GAAA,QAAA,CAAA,OAAA,EAAA,IAAA,EAAa,UAAA,CAAA,EAAC;AAAA,WAAI,CAAC,CAAA,GAAA,MAAA,CAAA,OAAA,EAAA,QAAA,EAAe,UAAA,CAAA,EAAC;AAAA,aAAI,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,CAAA,EAAJ,CAAI,CAAJ;AAArB,KAAK,CAAL;AAAd,GAAA,CAAfA,EACAA,MAAM,CAANA,OAAAA,GAAiB,CAAA,GAAA,QAAA,CAAA,OAAA,EAAA,QAAA,EAAiB,UAAA,CAAA,EAAC;AAAA,WAAI,CAAC,CAAA,GAAA,MAAA,CAAA,OAAA,EAAA,IAAA,EAAW,UAAA,CAAA,EAAC;AAAA,aAAI,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,CAAA,EAAJ,CAAI,CAAJ;AAAjB,KAAK,CAAL;AAAlB,GAAA,CADjBA,EAEOA,MAFPA;AAGD","sourcesContent":["import { constant, isEqual, some, filter } from 'lodash'\nexport { getEventsFromInput } from './events'\n\n/**\n * Check to see if a variable is a string\n * @param {any} varToCheck - Variable to check for type string\n * @returns {boolean} Whether or not the provided value is a string\n */\nexport function isString(varToCheck) {\n  return typeof varToCheck === 'string' || varToCheck instanceof String\n}\n\n/**\n * @private\n * Create a function if not already one\n * @param {Function|object|Array|string} f function or value of return for new function\n * @returns {any} Callable\n */\nexport function createCallable(f) {\n  return typeof f === 'function' ? f : constant(f)\n}\n\n/**\n * Invoke function or handle existing array to create array\n * query settings\n * @param {any} f - Function or array of queries\n * @param {object} props - Component props\n * @returns {Array|null} Array of query settings\n */\nexport function invokeArrayQuery(f, props) {\n  const result = createCallable(f)(props)\n  if (Array.isArray(result)) {\n    return result\n  }\n  if (!result) {\n    return null\n  }\n  return [result]\n}\n\n/**\n * Get the displayName field of a component falling\n * back to name field then finally to \"component\".\n * @param {React.Component} Component - Component from\n * which to get displayName\n * @returns {string} Display name of component\n */\nfunction getDisplayName(Component) {\n  if (typeof Component === 'string') {\n    return Component\n  }\n\n  if (!Component) {\n    return undefined\n  }\n\n  return Component.displayName || Component.name || 'Component'\n}\n\n/**\n * Get provided react component's display name and wrap with with a passed name.\n * @param {React.Component} BaseComponent - Component from which to get name to wrap\n * @param {string} hocName - Name of wrapping hoc\n * @returns {string} Wrapped display name for component\n */\nexport function wrapDisplayName(BaseComponent, hocName) {\n  return `${hocName}(${getDisplayName(BaseComponent)})`\n}\n\n/**\n * Get changes between two query settings arrays\n * @param {Array} data - Query settings array\n * @param {Array} prevData - Previous query settings array\n * @returns {object} Object containing added and removed value changes\n */\nexport function getChanges(data = [], prevData = []) {\n  const result = {}\n  result.added = filter(data, d => !some(prevData, p => isEqual(d, p)))\n  result.removed = filter(prevData, p => !some(data, d => isEqual(p, d)))\n  return result\n}\n"]},"metadata":{},"sourceType":"script"}