{"version":3,"sources":["../src/reducers.js"],"names":["START","actionTypes","SET","SET_PROFILE","MERGE","LOGIN","LOGOUT","LOGIN_ERROR","CLEAR_ERRORS","REMOVE","NO_VALUE","SET_LISTENER","UNSET_LISTENER","AUTHENTICATION_INIT_STARTED","AUTHENTICATION_INIT_FINISHED","AUTH_EMPTY_CHANGE","AUTH_LINK_SUCCESS","UNAUTHORIZED_ERROR","AUTH_UPDATE_SUCCESS","AUTH_RELOAD_SUCCESS","PROFILE_UPDATE_SUCCESS","isInitializingReducer","state","action","type","requestingReducer","path","requestedReducer","timestampsReducer","Date","now","createDataReducer","actionKey","Object","previousData","mergedData","preserve","Array","isArray","Error","authReducer","isLoaded","isEmpty","auth","toJSON","payload","reauthenticate","authErrorReducer","authError","profileReducer","profile","assign","errorsReducer","errors","filter","listenersById","id","allListeners","lId","listenersReducer","byId","allIds","dataReducer","orderedReducer"],"mappings":"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","sourcesContent":["import { pick, omit, get, isObject } from 'lodash'\nimport { setWith, assign } from 'lodash/fp'\nimport { actionTypes } from './constants'\nimport {\n  getSlashStrPath,\n  getDotStrPath,\n  recursiveUnset,\n  combineReducers,\n  preserveValuesFromState\n} from './utils/reducers'\n\nconst {\n  START,\n  SET,\n  SET_PROFILE,\n  MERGE,\n  LOGIN,\n  LOGOUT,\n  LOGIN_ERROR,\n  CLEAR_ERRORS,\n  REMOVE,\n  NO_VALUE,\n  SET_LISTENER,\n  UNSET_LISTENER,\n  AUTHENTICATION_INIT_STARTED,\n  AUTHENTICATION_INIT_FINISHED,\n  AUTH_EMPTY_CHANGE,\n  AUTH_LINK_SUCCESS,\n  UNAUTHORIZED_ERROR,\n  AUTH_UPDATE_SUCCESS,\n  AUTH_RELOAD_SUCCESS,\n  PROFILE_UPDATE_SUCCESS\n} = actionTypes\n\n/**\n * Reducer for isInitializing state. Changed by `AUTHENTICATION_INIT_STARTED`\n * and `AUTHENTICATION_INIT_FINISHED` actions.\n * @param  {object} [state=false] - Current isInitializing redux state\n * @param  {object} action - Object containing the action that was dispatched\n * @param  {string} action.type - Type of action that was dispatched\n * @returns {object} Profile state after reduction\n */\nexport function isInitializingReducer(state = false, action) {\n  switch (action.type) {\n    case AUTHENTICATION_INIT_STARTED:\n      return true\n    case AUTHENTICATION_INIT_FINISHED:\n      return false\n    default:\n      return state\n  }\n}\n\n/**\n * Reducer for requesting state.Changed by `START`, `NO_VALUE`, and `SET` actions.\n * @param  {object} [state={}] - Current requesting redux state\n * @param  {object} action - Object containing the action that was dispatched\n * @param  {string} action.type - Type of action that was dispatched\n * @param  {string} action.path - Path of action that was dispatched\n * @returns {object} Profile state after reduction\n */\nexport function requestingReducer(state = {}, { type, path }) {\n  switch (type) {\n    case START:\n      return {\n        ...state,\n        [getSlashStrPath(path)]: true\n      }\n    case NO_VALUE:\n    case SET:\n      return {\n        ...state,\n        [getSlashStrPath(path)]: false\n      }\n    default:\n      return state\n  }\n}\n\n/**\n * Reducer for requested state. Changed by `START`, `NO_VALUE`, and `SET` actions.\n * @param  {object} [state={}] - Current requested redux state\n * @param  {object} action - Object containing the action that was dispatched\n * @param  {string} action.type - Type of action that was dispatched\n * @param  {string} action.path - Path of action that was dispatched\n * @returns {object} Profile state after reduction\n */\nexport function requestedReducer(state = {}, { type, path }) {\n  switch (type) {\n    case START:\n      return {\n        ...state,\n        [getSlashStrPath(path)]: false\n      }\n    case NO_VALUE:\n    case SET:\n      return {\n        ...state,\n        [getSlashStrPath(path)]: true\n      }\n    default:\n      return state\n  }\n}\n\n/**\n * Reducer for timestamps state. Changed by `START`, `NO_VALUE`, and `SET` actions.\n * @param  {object} [state={}] - Current timestamps redux state\n * @param  {object} action - Object containing the action that was dispatched\n * @param  {string} action.type - Type of action that was dispatched\n * @param  {string} action.path - Path of action that was dispatched\n * @returns {object} Profile state after reduction\n */\nexport function timestampsReducer(state = {}, { type, path }) {\n  switch (type) {\n    case START:\n    case NO_VALUE:\n    case SET:\n      return {\n        ...state,\n        [getSlashStrPath(path)]: Date.now()\n      }\n    default:\n      return state\n  }\n}\n\n/**\n * Creates reducer for data state. Used to create data and ordered reducers.\n * Changed by `SET` or `SET_ORDERED` (if actionKey === 'ordered'), `MERGE`,\n * `NO_VALUE`, and `LOGOUT` actions.\n * @param {string} actionKey - Key of state for which to make reducer (data or ordered)\n * @returns {Function} Data reducer\n * @private\n */\nfunction createDataReducer(actionKey = 'data') {\n  /**\n   * Creates reducer for data state. Used to create data and ordered reducers.\n   * Changed by `SET` or `SET_ORDERED` (if actionKey === 'ordered'), `MERGE`,\n   * `NO_VALUE`, and `LOGOUT` actions.\n   * @param {object} [state={}] - Current data redux state\n   * @param {object} action - Object containing the action that was dispatched\n   * @param {string} action.type - Type of action that was dispatched\n   * @param {string} action.path - Path of action that was dispatched\n   * @returns {object} Data state after reduction\n   * @private\n   */\n  return function dataReducer(state = {}, action) {\n    switch (action.type) {\n      case SET:\n        return setWith(\n          Object,\n          getDotStrPath(action.path),\n          action[actionKey],\n          state\n        )\n      case MERGE:\n        const previousData = get(state, getDotStrPath(action.path), {})\n        const mergedData = assign(previousData, action[actionKey])\n        return setWith(Object, getDotStrPath(action.path), mergedData, state)\n      case NO_VALUE:\n        return setWith(Object, getDotStrPath(action.path), null, state)\n      case REMOVE:\n        if (actionKey === 'data') {\n          return recursiveUnset(getDotStrPath(action.path), state)\n        }\n        return state\n      case LOGOUT:\n        // support keeping data when logging out - #125\n        if (action.preserve) {\n          if (Array.isArray(action.preserve)) {\n            return pick(state, action.preserve) // pick returns a new object\n          } else if (isObject(action.preserve)) {\n            return action.preserve[actionKey]\n              ? preserveValuesFromState(state, action.preserve[actionKey], {})\n              : {}\n          }\n          throw new Error(\n            'Invalid preserve parameter. It must be an Object or an Array'\n          )\n        }\n        return {}\n      default:\n        return state\n    }\n  }\n}\n\n/**\n * Reducer for auth state. Changed by `LOGIN`, `LOGOUT`, and `LOGIN_ERROR` actions.\n * @param  {object} [state={isLoaded: false}] - Current auth redux state\n * @param  {object} action - Object containing the action that was dispatched\n * @param  {string} action.type - Type of action that was dispatched\n * @returns {object} Profile state after reduction\n */\nexport function authReducer(\n  state = { isLoaded: false, isEmpty: true },\n  action\n) {\n  switch (action.type) {\n    case LOGIN:\n    case AUTH_UPDATE_SUCCESS:\n      if (!action.auth) {\n        return {\n          isEmpty: true,\n          isLoaded: true\n        }\n      }\n      const auth = action.auth.toJSON ? action.auth.toJSON() : action.auth\n      // Support keeping data\n      if (action.preserve && action.preserve.auth) {\n        return preserveValuesFromState(state, action.preserve.auth, {\n          ...auth,\n          isEmpty: false,\n          isLoaded: true\n        })\n      }\n      return { ...auth, isEmpty: false, isLoaded: true }\n    case AUTH_LINK_SUCCESS:\n    case AUTH_RELOAD_SUCCESS:\n      if (!action.payload) {\n        return {\n          isEmpty: true,\n          isLoaded: true\n        }\n      }\n      return {\n        ...(action.payload.toJSON ? action.payload.toJSON() : action.payload),\n        isEmpty: false,\n        isLoaded: true\n      }\n    case LOGIN_ERROR:\n    case AUTH_EMPTY_CHANGE:\n    case LOGOUT:\n      // If it's reauthenticate keep user datas\n      if (action.reauthenticate) {\n        return preserveValuesFromState(state, true, {})\n      }\n      // Support keeping data when logging out\n      if (action.preserve && action.preserve.auth) {\n        return preserveValuesFromState(state, action.preserve.auth, {\n          isLoaded: true,\n          isEmpty: true\n        })\n      }\n      return { isLoaded: true, isEmpty: true }\n    default:\n      return state\n  }\n}\n\n/**\n * Reducer for authError state. Changed by `LOGIN`, `LOGOUT`, `LOGIN_ERROR`, and\n * `UNAUTHORIZED_ERROR` actions.\n * @param  {object} [state={}] - Current authError redux state\n * @param  {object} action - Object containing the action that was dispatched\n * @param  {string} action.type - Type of action that was dispatched\n * @returns {object} authError state after reduction\n */\nexport function authErrorReducer(state = null, action) {\n  switch (action.type) {\n    case LOGIN:\n    case LOGOUT:\n      return null\n    case LOGIN_ERROR:\n    case UNAUTHORIZED_ERROR:\n      return action.authError\n    default:\n      return state\n  }\n}\n\n/**\n * Reducer for profile state. Changed by `SET_PROFILE`, `LOGOUT`, and\n * `LOGIN_ERROR` actions.\n * @param  {object} [state={isLoaded: false}] - Current profile redux state\n * @param  {object} action - Object containing the action that was dispatched\n * @param  {string} action.type - Type of action that was dispatched\n * @returns {object} Profile state after reduction\n */\nexport function profileReducer(\n  state = { isLoaded: false, isEmpty: true },\n  action\n) {\n  switch (action.type) {\n    case SET_PROFILE:\n      if (!action.profile) {\n        return {\n          ...state,\n          isEmpty: true,\n          isLoaded: true\n        }\n      }\n      return {\n        ...action.profile,\n        isEmpty: false,\n        isLoaded: true\n      }\n    case PROFILE_UPDATE_SUCCESS:\n      return Object.assign({}, state, action.payload)\n    case LOGIN:\n      // Support keeping data when logging out\n      if (action.preserve && action.preserve.profile) {\n        return preserveValuesFromState(state, action.preserve.profile, {\n          isLoaded: true,\n          isEmpty: true\n        })\n      }\n      return {\n        isEmpty: true,\n        isLoaded: false\n      }\n    case LOGOUT:\n    case AUTH_EMPTY_CHANGE:\n      // Support keeping data when logging out\n      if (action.preserve && action.preserve.profile) {\n        return preserveValuesFromState(state, action.preserve.profile, {\n          isLoaded: true,\n          isEmpty: true\n        })\n      }\n      return { isLoaded: true, isEmpty: true }\n    default:\n      return state\n  }\n}\n\n/**\n * Reducer for errors state. Changed by `UNAUTHORIZED_ERROR`, `CLEAR_ERRORS`,\n * and `LOGOUT` actions.\n * @param  {object} [state=[]] - Current errors redux state\n * @param  {object} action - Object containing the action that was dispatched\n * @param  {string} action.type - Type of action that was dispatched\n * @param  {Function} action.preserve - `not required` Filter function for\n * preserving errors\n * @returns {object} Profile state after reduction\n */\nexport function errorsReducer(state = [], action) {\n  switch (action.type) {\n    case LOGIN_ERROR:\n    case UNAUTHORIZED_ERROR:\n      if (!Array.isArray(state)) {\n        throw new Error('Errors state must be an array')\n      }\n      return [...state, action.authError]\n    case LOGOUT:\n    case CLEAR_ERRORS:\n      // Support keeping errors through a filter function\n      if (action.preserve && action.preserve.errors) {\n        if (typeof action.preserve.errors !== 'function') {\n          throw new Error(\n            'Preserve for the errors state currently only supports functions'\n          )\n        }\n        return state.filter(action.preserve.errors) // run filter function on state\n      }\n      return []\n    default:\n      return state\n  }\n}\n\n/**\n * Reducer for listeners ids. Changed by `SET_LISTENER` and `UNSET_LISTENER`\n * actions.\n * @param  {object} [state={}] - Current listenersById redux state\n * @param  {object} action - Object containing the action that was dispatched\n * @param  {string} action.type - Type of action that was dispatched\n * @returns {object} listenersById state after reduction (used in listeners)\n * @private\n */\nfunction listenersById(state = {}, { type, path, payload }) {\n  switch (type) {\n    case SET_LISTENER:\n      return {\n        ...state,\n        [payload.id]: {\n          id: payload.id,\n          path\n        }\n      }\n    case UNSET_LISTENER:\n      return omit(state, [payload.id])\n    default:\n      return state\n  }\n}\n\n/**\n * Reducer for listeners state. Changed by `UNAUTHORIZED_ERROR`\n * and `LOGOUT` actions.\n * @param  {object} [state=[]] - Current allListeners redux state\n * @param  {object} action - Object containing the action that was dispatched\n * @param  {string} action.type - Type of action that was dispatched\n * @returns {object} allListeners state after reduction (used in listeners)\n * @private\n */\nfunction allListeners(state = [], { type, path, payload }) {\n  switch (type) {\n    case SET_LISTENER:\n      return [...state, payload.id]\n    case UNSET_LISTENER:\n      return state.filter(lId => lId !== payload.id)\n    default:\n      return state\n  }\n}\n\n/**\n * Reducer for listeners state. Changed by `UNAUTHORIZED_ERROR`\n * and `LOGOUT` actions.\n * @param  {object} [state=[]] - Current listeners redux state\n * @param  {object} action - Object containing the action that was dispatched\n * @param  {string} action.type - Type of action that was dispatched\n * @returns {object} Profile state after reduction\n */\nexport const listenersReducer = combineReducers({\n  byId: listenersById,\n  allIds: allListeners\n})\n\n/**\n * Reducer for data state. Changed by `SET`, `SET_ORDERED`,`NO_VALUE`, and\n * `LOGOUT` actions.\n * @param  {object} [state={}] - Current data redux state\n * @param  {object} action - Object containing the action that was dispatched\n * @param  {string} action.type - Type of action that was dispatched\n * @param  {string} action.path - Path of action that was dispatched\n * @returns {object} Data state after reduction\n */\nexport const dataReducer = createDataReducer()\n\n/**\n * Reducer for ordered state. Changed by `SET`, `SET_ORDERED`,`NO_VALUE`, and\n * `LOGOUT` actions.\n * @param  {object} [state={}] - Current data redux state\n * @param  {object} action - Object containing the action that was dispatched\n * @param  {string} action.type - Type of action that was dispatched\n * @param  {string} action.path - Path of action that was dispatched\n * @returns {object} Data state after reduction\n */\nexport const orderedReducer = createDataReducer('ordered')\n"],"file":"reducers.js"}