{"version":3,"sources":["../src/useFirestoreConnect.js"],"names":["useFirestoreConnect","queriesConfigs","firestore","firestoreIsEnabled","queryRef","data","current","changes","unsetListeners","removed","setListeners","added"],"mappings":"4WAgDe,QAASA,CAAAA,mBAAT,CAA6BC,cAA7B,CAA6C,IACpDC,CAAAA,SAAS,CAAG,2BADwC,CAEpDC,kBAAkB,CAAG,CAAC,CAACD,SAF6B,CAGpDE,QAAQ,CAAG,mBAHyC,CAKpDC,IAAI,CAAG,mBAAQ,iBAAM,4BAAiBJ,cAAjB,CAAN,CAAR,CAAgD,CAACA,cAAD,CAAhD,CAL6C,CAO1D,qBACE,UAAM,CACJ,GAAIE,kBAAkB,EAAI,CAAC,sBAAQE,IAAR,CAAcD,QAAQ,CAACE,OAAvB,CAA3B,CAA4D,CAC1D,GAAMC,CAAAA,OAAO,CAAG,sBAAWF,IAAX,CAAiBD,QAAQ,CAACE,OAA1B,CAAhB,CAEAF,QAAQ,CAACE,OAAT,CAAmBD,IAHuC,CAM1DH,SAAS,CAACM,cAAV,CAAyBD,OAAO,CAACE,OAAjC,CAN0D,CAS1DP,SAAS,CAACQ,YAAV,CAAuBH,OAAO,CAACI,KAA/B,CACD,CACF,CAbH,CAcE,CAACN,IAAD,CAdF,CAP0D,CAyB1D,qBAAU,UAAM,CACd,MAAO,WAAM,CACPF,kBAAkB,EAAIC,QAAQ,CAACE,OADxB,EAETJ,SAAS,CAACM,cAAV,CAAyBJ,QAAQ,CAACE,OAAlC,CAEH,CACF,CAND,CAMG,EANH,CAOD,C","sourcesContent":["import { isEqual } from 'lodash'\nimport { useRef, useMemo, useEffect } from 'react'\nimport { invokeArrayQuery, getChanges } from './utils'\nimport useFirestore from './useFirestore'\n\n/**\n * @description React hook that automatically listens/unListens\n * to provided Cloud Firestore paths. Make sure you have required/imported\n * Cloud Firestore, including it's reducer, before attempting to use.\n * **Note** Populate is not yet supported.\n * @param {object|string|Array|Function} queriesConfigs - An object, string,\n * or array of object or string for paths to sync from firestore. Can also be\n * a function that returns the object, string, or array of object or string.\n * @see https://react-redux-firebase.com/docs/api/useFirestoreConnect.html\n * @example <caption>Basic</caption>\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n * import { useFirestoreConnect } from 'react-redux-firebase'\n *\n * export default function TodosList() {\n *   useFirestoreConnect('todos') // sync todos collection from Firestore into redux\n *   const todos = useSelector(state => state.firestore.data.todos)\n *   return (\n *     <ul>\n *       {todos &&\n *         todos.map((todo) => (\n *           <li>id: {todo.id} todo: {todo.description}</li>\n *         ))}\n *    </ul>\n *   )\n * }\n * @example <caption>Object as query</caption>\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n * import { useFirestoreConnect } from 'react-redux-firebase'\n *\n * export default function TodoItem({ todoId }) {\n *   useFirestoreConnect([{\n *     collection: 'todos',\n *     doc: todoId\n *   }])\n *   const todo = useSelector(\n *     ({ firestore: { data } }) => data.todos && data.todos[todoId]\n *   )\n *\n *   return <div>{JSON.stringify(todo)}</div>\n * }\n */\nexport default function useFirestoreConnect(queriesConfigs) {\n  const firestore = useFirestore()\n  const firestoreIsEnabled = !!firestore\n  const queryRef = useRef()\n\n  const data = useMemo(() => invokeArrayQuery(queriesConfigs), [queriesConfigs])\n\n  useEffect(\n    () => {\n      if (firestoreIsEnabled && !isEqual(data, queryRef.current)) {\n        const changes = getChanges(data, queryRef.current)\n\n        queryRef.current = data\n\n        // Remove listeners for inactive subscriptions\n        firestore.unsetListeners(changes.removed)\n\n        // Add listeners for new subscriptions\n        firestore.setListeners(changes.added)\n      }\n    },\n    [data]\n  )\n\n  // Emulate componentWillUnmount\n  useEffect(() => {\n    return () => {\n      if (firestoreIsEnabled && queryRef.current) {\n        firestore.unsetListeners(queryRef.current)\n      }\n    }\n  }, [])\n}\n"],"file":"useFirestoreConnect.js"}