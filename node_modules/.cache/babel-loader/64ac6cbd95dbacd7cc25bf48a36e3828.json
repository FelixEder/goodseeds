{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.default = useFirebaseConnect;\n\nvar _differenceWith2 = _interopRequireDefault(require(\"lodash/differenceWith\")),\n    _isEqual2 = _interopRequireDefault(require(\"lodash/isEqual\")),\n    _react = require(\"react\"),\n    _query = require(\"./actions/query\"),\n    _utils = require(\"./utils\"),\n    _useFirebase = _interopRequireDefault(require(\"./useFirebase\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction useFirebaseConnect(queriesConfig) {\n  var firebase = (0, _useFirebase.default)(),\n      eventRef = (0, _react.useRef)(),\n      dataRef = (0, _react.useRef)(),\n      data = (0, _react.useMemo)(function () {\n    return (0, _utils.invokeArrayQuery)(queriesConfig);\n  }, [queriesConfig]);\n  (0, _react.useEffect)(function () {\n    if (null !== data && !(0, _isEqual2.default)(data, dataRef.current)) {\n      var itemsToSubscribe = (0, _differenceWith2.default)(data, dataRef.current, _isEqual2.default),\n          itemsToUnsubscribe = (0, _differenceWith2.default)(dataRef.current, data, _isEqual2.default);\n      dataRef.current = data, (0, _query.unWatchEvents)(firebase, firebase.dispatch, (0, _utils.getEventsFromInput)(itemsToUnsubscribe)), eventRef.current = (0, _utils.getEventsFromInput)(data), (0, _query.watchEvents)(firebase, firebase.dispatch, (0, _utils.getEventsFromInput)(itemsToSubscribe));\n    }\n  }, [data]), (0, _react.useEffect)(function () {\n    return function () {\n      (0, _query.unWatchEvents)(firebase, firebase.dispatch, eventRef.current);\n    };\n  }, []);\n}\n\nmodule.exports = exports.default;","map":{"version":3,"sources":["../src/useFirebaseConnect.js"],"names":["firebase","eventRef","dataRef","data","itemsToSubscribe","itemsToUnsubscribe"],"mappings":";;;;;;;;;;;;;;;;;AA+De;;AAAA,SAAA,kBAAA,CAAA,aAAA,EAA2C;AAAA,MAClDA,QAAQ,GAAG,CAAA,GAAA,YAAA,CADuC,OACvC,GADuC;AAAA,MAElDC,QAAQ,GAAG,CAAA,GAAA,MAAA,CAFuC,MAEvC,GAFuC;AAAA,MAGlDC,OAAO,GAAG,CAAA,GAAA,MAAA,CAHwC,MAGxC,GAHwC;AAAA,MAKlDC,IAAI,GAAG,CAAA,GAAA,MAAA,CAAA,OAAA,EAAQ,YAAA;AAAA,WAAM,CAAA,GAAA,MAAA,CAAA,gBAAA,EAAN,aAAM,CAAN;AAAR,GAAA,EAA+C,CALJ,aAKI,CAA/C,CAL2C;AAOxD,GAAA,GAAA,MAAA,CAAA,SAAA,EACE,YAAM;AACJ,QAAI,SAAA,IAAA,IAAiB,CAAC,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,IAAA,EAAcD,OAAO,CAA3C,OAAsB,CAAtB,EAAsD;AAAA,UAC9CE,gBAAgB,GAAG,CAAA,GAAA,gBAAA,CAAA,OAAA,EAAA,IAAA,EAAqBF,OAAO,CAA5B,OAAA,EAAA,SAAA,CAD2B,OAC3B,CAD2B;AAAA,UAE9CG,kBAAkB,GAAG,CAAA,GAAA,gBAAA,CAAA,OAAA,EACzBH,OAAO,CADkB,OAAA,EAAA,IAAA,EAAA,SAAA,CAFyB,OAEzB,CAFyB;AAQpDA,MAAAA,OAAO,CAAPA,OAAAA,GARoD,IAQpDA,EAEA,CAAA,GAAA,MAAA,CAAA,aAAA,EAAA,QAAA,EAEEF,QAAQ,CAFV,QAAA,EAGE,CAAA,GAAA,MAAA,CAAA,kBAAA,EAbkD,kBAalD,CAHF,CAFAE,EAQAD,QAAQ,CAARA,OAAAA,GAAmB,CAAA,GAAA,MAAA,CAAA,kBAAA,EAhBiC,IAgBjC,CARnBC,EAWA,CAAA,GAAA,MAAA,CAAA,WAAA,EAAA,QAAA,EAEEF,QAAQ,CAFV,QAAA,EAGE,CAAA,GAAA,MAAA,CAAA,kBAAA,EAHF,gBAGE,CAHF,CAXAE;AAiBH;AA3BH,GAAA,EA4BE,CAnCsD,IAmCtD,CA5BF,GAgCA,CAAA,GAAA,MAAA,CAAA,SAAA,EAAU,YAAM;AACd,WAAO,YAAM;AACX,OAAA,GAAA,MAAA,CAAA,aAAA,EAAA,QAAA,EAAwBF,QAAQ,CAAhC,QAAA,EAA2CC,QAAQ,CAAnD,OAAA;AAEH,KAHC;AADF,GAAA,EAAA,EAAA,CAhCA","sourcesContent":["import { isEqual, differenceWith } from 'lodash'\nimport { useMemo, useEffect, useRef } from 'react'\nimport { watchEvents, unWatchEvents } from './actions/query'\nimport { getEventsFromInput, invokeArrayQuery } from './utils'\nimport useFirebase from './useFirebase'\n\n/**\n * @description Hook that automatically listens/unListens to provided firebase paths\n * using React's useEffect hook.\n * @param {object|string|Function|Array} queriesConfig - Object, string, or\n * array contains object or string for path to sync from Firebase or null if\n * hook doesn't need to sync. Can also be a function that returns an object,\n * a path string, or array of an object or a path string.\n * @see https://react-redux-firebase.com/docs/api/useFirebaseConnect.html\n * @example <caption>Ordered Data</caption>\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n * import { useFirebaseConnect } from 'react-redux-firebase'\n *\n * export default function Todos() {\n *   // sync /todos from firebase into redux\n *   useFirebaseConnect('todos')\n *   // Connect to redux state using selector hook\n *   const todos = useSelector(state => state.firebase.data.todos)\n *   return (\n *     <div>\n *       {JSON.stringify(todos, null, 2)}\n *     </div>\n *   )\n * }\n * @example <caption>Data that depends on props</caption>\n * import React from 'react'\n * import { compose } from 'redux'\n * import { useSelector } from 'react-redux'\n * import { useFirebaseConnect } from 'react-redux-firebase'\n *\n * export default function Post({ postId }) {\n *   useFirebaseConnect(`posts/${postId}`) // sync /posts/postId from firebase into redux\n *   const post = useSelector(({ firebase: { ordered: { posts } } }) => posts && posts[postId])\n *   return (\n *     <div>\n *       {JSON.stringify(post, null, 2)}\n *     </div>\n *   )\n * }\n * @example <caption>Data that depends on props, an array as a query</caption>\n * import React from 'react'\n * import { compose } from 'redux'\n * import { useSelector } from 'react-redux'\n * import { useFirebaseConnect, getVal } from 'react-redux-firebase'\n *\n * export default function Post({ postId }) {\n *   useFirebaseConnect([`posts/${postId}`], [postId]) // sync /posts/postId from firebase into redux\n *   const post = useSelector(state => {\n *     return state.firebase.ordered.posts && state.firebase.ordered.posts[postId]\n *   })\n *   return (\n *     <div>\n *       {JSON.stringify(post, null, 2)}\n *     </div>\n *   )\n * }\n */\nexport default function useFirebaseConnect(queriesConfig) {\n  const firebase = useFirebase()\n  const eventRef = useRef()\n  const dataRef = useRef()\n\n  const data = useMemo(() => invokeArrayQuery(queriesConfig), [queriesConfig])\n\n  useEffect(\n    () => {\n      if (data !== null && !isEqual(data, dataRef.current)) {\n        const itemsToSubscribe = differenceWith(data, dataRef.current, isEqual)\n        const itemsToUnsubscribe = differenceWith(\n          dataRef.current,\n          data,\n          isEqual\n        )\n\n        dataRef.current = data\n        // UnWatch all current events\n        unWatchEvents(\n          firebase,\n          firebase.dispatch,\n          getEventsFromInput(itemsToUnsubscribe)\n        )\n        // Get watch events from new data\n        eventRef.current = getEventsFromInput(data)\n\n        // Watch new events\n        watchEvents(\n          firebase,\n          firebase.dispatch,\n          getEventsFromInput(itemsToSubscribe)\n        )\n      }\n    },\n    [data]\n  )\n\n  // Emulate componentWillUnmount\n  useEffect(() => {\n    return () => {\n      unWatchEvents(firebase, firebase.dispatch, eventRef.current)\n    }\n  }, [])\n}\n"]},"metadata":{},"sourceType":"script"}