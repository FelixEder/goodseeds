{"version":3,"sources":["../src/helpers.js"],"names":["getVal","firebase","path","notSetValue","dotPath","valueAtPath","isLoaded","args","length","every","arg","isEmpty","some","fixPath","substring","buildChildList","state","list","p","mapFn","Array","isArray","val","key","getKey","populateByKey","dotRoot","root","pathArr","childParam","push","pathString","join","data","keyProp","populateChild","child","childVal","String","split","filter","Boolean","populateVal","childAlias","populate","populates","splitPath","indexOf","populatesForData","slice","someArrayItemHasKey","array","item","dataHasPopulateChilds","map","dataValue","value","populatedValue","reduce","acc","v","childKey","populatesForDataItem","obj"],"mappings":"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","sourcesContent":["import {\n  size,\n  set,\n  get,\n  has,\n  map,\n  mapValues,\n  reduce,\n  defaultsDeep,\n  some\n} from 'lodash'\nimport { topLevelPaths } from './constants'\nimport { getPopulateObjs } from './utils/populate'\nimport { getDotStrPath } from './utils/reducers'\n\n/**\n * **Deprecated** - This helper will be removed in future versions. Please\n * use object destructuring or utilities from other libraries such as\n * [lodash's get](https://lodash.com/docs/4.17.15#get).\n * Get a value from firebase using slash notation. This enables an easy\n * migration from v1's dataToJS/pathToJS/populatedDataToJS functions to v2 syntax\n * **NOTE:** Setting a default value will cause `isLoaded` to always return true\n * @param {object} firebase - Firebase instance (state.firebase)\n * @param {string} path - Path of parameter to load\n * @param {any} notSetValue - Value to return if value is not\n * found in redux. This will cause `isLoaded` to always return true (since\n * value is set from the start).\n * @returns {any} Data located at path within firebase.\n * @example <caption>Basic</caption>\n * import { compose } from 'redux'\n * import { connect } from 'react-redux'\n * import { firebaseConnect, getVal } from 'react-redux-firebase'\n *\n * const enhance = compose(\n *   firebaseConnect(['todos/user1']),\n *   connect(({ firebase }) => ({\n *     // this.props.todos loaded from state.firebase.data.todos\n *     todos: getVal(firebase, 'data/todos/user1')\n *   }))\n * )\n * export default enhance(SomeComponent)\n * @example <caption>Base Paths</caption>\n * import { connect } from 'react-redux'\n * import { firebaseConnect, getVal } from 'react-redux-firebase'\n *\n * export default connect(({ firebase }) => ({\n *   // this.props.auth loaded from state.firebase.auth\n *   auth: getVal(firebase, 'auth'),\n *   profile: getVal(firebase, 'profile')\n * })(SomeComponent)\n * @example <caption>Default Value</caption>\n * import { compose } from 'redux'\n * import { connect } from 'react-redux'\n * import { firebaseConnect, getVal } from 'react-redux-firebase'\n *\n * const defaultValue = {\n *  1: {\n *    text: 'Example Todo'\n *  }\n * }\n *\n * const enhance = compose(\n *   firebaseConnect(['todos/user1']),\n *   connect(({ firebase }) => ({\n *     // this.props.todos loaded from state.firebase.data.todos\n *     todos: getVal(firebase, 'data/todos/user1', defaultValue)\n *   }))\n * )\n *\n * export default enhance(SomeComponent)\n */\nexport function getVal(firebase, path, notSetValue) {\n  if (!firebase) {\n    return notSetValue\n  }\n\n  const dotPath = getDotStrPath(path)\n  const valueAtPath = get(firebase, dotPath, notSetValue)\n\n  return valueAtPath\n}\n\n/**\n * Detect whether data from redux state is loaded yet or not\n * @param {...object} args - Items to check loaded status of. A comma separated\n * list is also acceptable.\n * @returns {boolean} Whether or not item is loaded\n * @example\n * import React from 'react'\n * import PropTypes from 'prop-types'\n * import { compose } from 'redux'\n * import { connect } from 'react-redux'\n * import firebaseConnect from 'react-redux-firebase/lib/firebaseConnect'\n * import { isLoaded, isEmpty } from 'react-redux-firebase/lib/utils'\n *\n * const enhance = compose(\n *   firebaseConnect(['todos']),\n *   connect(({ firebase: { data: { todos } } }) => ({\n *     todos // state.firebase.data.todos from redux passed as todos prop\n *   }))\n * )\n *\n * function Todos({ todos }) {\n *   // Message for if todos are loading\n *   if (!isLoaded(todos)) {\n *     return <span>Loading...</span>\n *   }\n *\n *   // Message if todos are empty\n *   if (isEmpty(todos)) {\n *     return <span>No Todos Found</span>\n *   }\n *\n *   return <div><pre>{JSON.stringify(todos, null, 2)}</pre></div>\n * }\n *\n * Todos.propTypes = {\n *   todos: PropTypes.object\n * }\n *\n * export default enhance(Todos)\n */\nexport function isLoaded(...args) {\n  return !args || !args.length\n    ? true\n    : args.every(arg => arg !== undefined && get(arg, 'isLoaded') !== false)\n}\n\n/**\n * Detect whether items are empty or not\n * @param {object} args - Item to check loaded status of. A comma seperated list\n * is also acceptable.\n * @returns {boolean} Whether or not item is empty\n * @example\n * import React from 'react'\n * import PropTypes from 'prop-types'\n * import { compose } from 'redux'\n * import { connect } from 'react-redux'\n * import { firebaseConnect, isEmpty, isLoaded } from 'react-redux-firebase'\n *\n * const enhance = compose(\n *   firebaseConnect(['todos']),\n *   connect(({ firebase: { data: { todos } } }) => ({\n *     todos // state.firebase.data.todos from redux passed as todos prop\n *   }))\n * )\n *\n * function Todos({ todos }) {\n *   // Message for if todos are loading\n *   if (!isLoaded(todos)) {\n *     return <span>Loading...</span>\n *   }\n *\n *   // Message if todos are empty\n *   if (isEmpty(todos)) {\n *     return <span>No Todos Found</span>\n *   }\n *\n *   return <todos>{JSON.stringify(todos)}</todos>\n * }\n *\n * Todos.propTypes = {\n *   todos: PropTypes.object\n * }\n *\n * export default enhance(Todos)\n */\nexport function isEmpty(...args) {\n  return !args || !args.length\n    ? true\n    : args.some(arg => !(arg && size(arg)) || arg.isEmpty === true)\n}\n\n/**\n * @description Fix path by adding \"/\" to path if needed\n * @param {string} path - Path string to fix\n * @returns {string} - Fixed path\n * @private\n */\nexport function fixPath(path) {\n  return (path.substring(0, 1) === '/' ? '' : '/') + path\n}\n\n/**\n * @private\n * Build child list based on populate config\n * @param {object} state - Firebase state object\n * @param {object} list - Path of parameter to load\n * @param {object} p - Object with population settings\n * @returns {object} List of child objects\n */\nfunction buildChildList(state, list, p) {\n  const mapFn = Array.isArray(list) ? map : mapValues\n  return mapFn(list, (val, key) => {\n    let getKey = val\n    // Handle key: true lists\n    if (val === true || p.populateByKey) {\n      getKey = key\n    }\n    // Allow for aliasing populated data see #126 for more details\n    const dotRoot = getDotStrPath(p.root)\n    const pathArr = [dotRoot, getKey]\n\n    // Handle child param\n    if (p.childParam) {\n      pathArr.push(p.childParam)\n    }\n\n    const pathString = pathArr.join('.')\n\n    // Set to child under key if populate child exists\n    if (get(state.data, pathString)) {\n      return p.keyProp\n        ? { [p.keyProp]: getKey, ...get(state.data, pathString) }\n        : get(state.data, pathString)\n    }\n    // Populate child does not exist\n    return val === true || p.populateByKey ? val : getKey\n  })\n}\n\n/**\n * @private\n * Populate a child based on config. Handles list population\n * by making use of buildChildList.\n * @param {object} state - Firebase state object\n * @param {object} child - Path of parameter to load\n * @param {object} p - Object with population settings\n * @returns {object} Populated child object\n */\nfunction populateChild(state, child, p) {\n  // no matching child parameter\n  const childVal = get(child, p.child)\n  if (!child || !childVal) {\n    return null\n  }\n  // populate child is key\n  if (typeof childVal === 'string' || childVal instanceof String) {\n    // attach child paramter if it exists\n    const dotRoot = p.root\n      .split('/')\n      .filter(Boolean) // Drop falsey values (compact)\n      .join('.')\n    const pathArr = [dotRoot, childVal]\n\n    // Handle child param\n    if (p.childParam) {\n      pathArr.push(p.childParam)\n    }\n\n    const pathString = pathArr.join('.')\n\n    const populateVal = get(state.data, pathString)\n    if (populateVal) {\n      return set(\n        {},\n        p.childAlias || p.child,\n        p.keyProp ? { [p.keyProp]: childVal, ...populateVal } : populateVal\n      )\n    }\n    // matching child does not exist\n    return child\n  }\n  // populate child list\n  return set({}, p.childAlias || p.child, buildChildList(state, childVal, p))\n}\n\n/**\n * Populate with data from multiple locations of redux state.\n * @param {object} state - Firebase state object (state.firebase in redux store)\n * @param {string} path - Path of parameter to load\n * @param {Array} populates - Array of populate config objects\n * @param {object|string|boolean} notSetValue - Value to return if value is not found\n * @returns {object} Data located at path within Immutable Object\n * @example <caption>Basic</caption>\n * import { compose } from 'redux'\n * import { connect } from 'react-redux'\n * import { firebaseConnect } from 'react-redux-firebase'\n * const populates = [{ child: 'owner', root: 'users' }]\n *\n * const enhance = compose(\n *   firebaseConnect([\n *     { path: 'todos', populates } // load \"todos\" and matching \"users\" to redux\n *   ]),\n *   connect((state) => ({\n *     // this.props.todos loaded from state.firebase.data.todos\n *     // each todo has child 'owner' populated from matching uid in 'users' root\n *     // for loading un-populated todos use state.firebase.data.todos\n *     todos: populate(state.firebase, 'todos', populates),\n *   }))\n * )\n *\n * export default enhance(SomeComponent)\n */\nexport function populate(state, path, populates, notSetValue) {\n  const splitPath = path.split('/').filter(Boolean) // Drop falsey values (compact)\n  // append 'data' prefix to path if it is not a top level path\n  const pathArr =\n    topLevelPaths.indexOf(splitPath[0]) === -1\n      ? ['data', ...splitPath]\n      : splitPath\n  const dotPath = pathArr.join('.')\n  // Gather data from top level if path is profile (handles populating profile)\n  const data = get(state, dotPath, notSetValue)\n\n  // Return notSetValue for undefined child\n  if (!state || data === notSetValue) {\n    return notSetValue\n  }\n  // Return null for null child\n  if (data === null) {\n    return null\n  }\n\n  // check for if data is single object or a list of objects\n  const populatesForData = getPopulateObjs(\n    typeof populates === 'function'\n      ? populates(pathArr.slice(-1)[0], data) // pass last slice in path\n      : populates\n  )\n\n  if (Array.isArray(data)) {\n    // When using a path in ordered, data will be an array instead of an object\n    // and data is located at the `value` prop\n    const someArrayItemHasKey = array => key =>\n      some(array, item => has(item, key))\n\n    // Check items within the list to see if value exists for some populate parameters\n    const dataHasPopulateChilds = some(populatesForData, populate =>\n      someArrayItemHasKey(data)(['value', populate.child])\n    )\n\n    // Populate if populate children exist\n    if (dataHasPopulateChilds) {\n      return data.map(({ key, value: dataValue }) => {\n        const populatedValue = populatesForData\n          .map(p => populateChild(state, dataValue, p))\n          .reduce((acc, v) => defaultsDeep(v, acc), dataValue)\n\n        return {\n          key,\n          value: populatedValue\n        }\n      })\n    }\n\n    // return unpopulated data if no populates have values\n    return data\n  }\n\n  // check each populate child parameter for existence\n  const dataHasPopulateChilds = some(populatesForData, p => has(data, p.child))\n\n  // Single object that contains at least one child parameter\n  if (dataHasPopulateChilds) {\n    return populatesForData\n      .map(p => populateChild(state, data, p))\n      .reduce((acc, v) => defaultsDeep(v, acc), data)\n  }\n\n  // Return for profile since it is a single object (following is for a list of objects)\n  // TODO: Improve this logic to allow for other paths containing profile\n  if (pathArr.indexOf('profile') !== -1) {\n    return data\n  }\n\n  // Data is a map of objects, each value has parameters to be populated\n  return mapValues(data, (child, childKey) => {\n    // use child's key if doing ordered populate\n    const key = pathArr[0] === 'ordered' ? child.key : childKey\n    // get populate settings on item level (passes child if populates is a function)\n    const populatesForDataItem = getPopulateObjs(\n      typeof populates === 'function' ? populates(key, child) : populates\n    )\n    // confirm at least one populate value exists on child\n    const dataHasPopulateChilds = some(populatesForDataItem, p =>\n      has(child, p.child)\n    )\n    // return unmodified child if no populate params exist on child\n    if (!dataHasPopulateChilds) {\n      return child\n    }\n    // combine data from all populates to one object starting with original data\n    return reduce(\n      map(populatesForDataItem, p => populateChild(state, child, p)),\n      (obj, v) => defaultsDeep(v, obj),\n      child\n    )\n  })\n}\n"],"file":"helpers.js"}