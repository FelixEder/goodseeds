{"version":3,"sources":["../src/firestoreConnect.js"],"names":["firestoreConnect","queriesConfig","WrappedComponent","FirestoreConnectWithContext","props","_internalFirebase","_internalFirestore","dispatch","FirestoreConnectWrapped","firestoreIsEnabled","inputAsFunc","prevData","firestore","setListeners","unsetListeners","np","data","changes","removed","added","Component","propTypes","PropTypes","func","isRequired","firebase","object","displayName","wrappedComponent"],"mappings":"2iHAoCe,QAASA,CAAAA,gBAAT,EAA8C,IAApBC,CAAAA,aAAoB,wDAAJ,EAAI,CAC3D,MAAO,UAAAC,gBAAgB,CAAI,CAmEzB,QAASC,CAAAA,2BAAT,CAAqCC,KAArC,CAA4C,CAC1C,MACE,8BAAC,kCAAD,CAA2B,QAA3B,MACG,SAAAC,iBAAiB,QAChB,8BAAC,8BAAD,CAAuB,QAAvB,MACG,SAAAC,kBAAkB,QACjB,8BAAC,uBAAD,aACMF,KADN,EAEE,QAAQ,CAAEC,iBAAiB,CAACE,QAF9B,CAGE,SAAS,CAAED,kBAHb,CAIE,QAAQ,CAAED,iBAJZ,GADiB,CADrB,CADgB,CADpB,CAeH,CApFwB,GACnBG,CAAAA,uBADmB,wbAQZ,IARY,8JAcH,CAClB,GAAI,KAAKC,kBAAT,CAA6B,CAE3B,GAAMC,CAAAA,WAAW,CAAG,0BAAeT,aAAf,CAApB,CACA,KAAKU,QAAL,CAAgBD,WAAW,CAAC,KAAKN,KAAN,CAAa,KAAKA,KAAlB,CAHA,CAK3B,KAAKA,KAAL,CAAWQ,SAAX,CAAqBC,YAArB,CAAkC,KAAKF,QAAvC,CACD,CACF,CAtBsB,mEAwBA,CACjB,KAAKF,kBAAL,EAA2B,KAAKE,QADf,EAEnB,KAAKP,KAAL,CAAWQ,SAAX,CAAqBE,cAArB,CAAoC,KAAKH,QAAzC,CAEH,CA5BsB,0FA+BUI,EA/BV,CA+Bc,IAE3BH,CAAAA,SAF2B,CAEb,KAAKR,KAFQ,CAE3BQ,SAF2B,CAG7BF,WAAW,CAAG,0BAAeT,aAAf,CAHe,CAI7Be,IAAI,CAAGN,WAAW,CAACK,EAAD,CAAK,KAAKX,KAAV,CAJW,CAOnC,GAAI,KAAKK,kBAAL,EAA2B,CAAC,sBAAQO,IAAR,CAAc,KAAKL,QAAnB,CAAhC,CAA8D,CAC5D,GAAMM,CAAAA,OAAO,CAAG,sBAAWD,IAAX,CAAiB,KAAKL,QAAtB,CAAhB,CAEA,KAAKA,QAAL,CAAgBK,IAH4C,CAM5DJ,SAAS,CAACE,cAAV,CAAyBG,OAAO,CAACC,OAAjC,CAN4D,CAS5DN,SAAS,CAACC,YAAV,CAAuBI,OAAO,CAACE,KAA/B,CACD,CACF,CAjDsB,uCAmDd,CACP,MAAO,8BAAC,gBAAD,CAAsB,KAAKf,KAA3B,CACR,CArDsB,8CAUE,CACvB,MAAO,CAAC,CAAC,KAAKA,KAAL,CAAWQ,SACrB,CAZsB,6BACaQ,gBADb,EA6FzB,uBA5FMZ,uBA4FN,oBA3F4BN,gBA2F5B,kBA5FMM,uBA4FN,eA1FuB,2BACnBN,gBADmB,CAEnB,yBAFmB,CA0FvB,EArCAM,uBAAuB,CAACa,SAAxB,CAAoC,CAClCd,QAAQ,CAAEe,mBAAUC,IAAV,CAAeC,UADS,CAElCC,QAAQ,CAAEH,mBAAUI,MAFc,CAGlCd,SAAS,CAAEU,mBAAUI,MAHa,CAqCpC,CAPAvB,2BAA2B,CAACwB,WAA5B,CAA0C,2BACxCzB,gBADwC,CAExC,kBAFwC,CAO1C,CAFAC,2BAA2B,CAACyB,gBAA5B,CAA+C1B,gBAE/C,CAAO,kCAAaC,2BAAb,CAA0CD,gBAA1C,CACR,CACF,C","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { isEqual } from 'lodash'\nimport hoistStatics from 'hoist-non-react-statics'\nimport { createCallable, wrapDisplayName, getChanges } from './utils'\nimport ReduxFirestoreContext from './ReduxFirestoreContext'\nimport ReactReduxFirebaseContext from './ReactReduxFirebaseContext'\n\n/**\n * @augments React.Component\n * @description Higher Order Component that automatically listens/unListens\n * to provided Cloud Firestore paths using React's Lifecycle hooks. Make sure you\n * have required/imported Cloud Firestore, including it's reducer, before\n * attempting to use. **Note** Populate is not yet supported.\n * @param {Array|Function} queriesConfig - Array of objects or strings for paths to sync\n * from Firebase. Can also be a function that returns the array. The function\n * is passed the current props and the firebase object.\n * @returns {Function} - Function which accepts a component to wrap and returns the\n * wrapped component\n * @see https://react-redux-firebase.com/docs/api/firestoreConnect.html\n * @example <caption>Basic</caption>\n * // props.firebase set on App component as firebase object with helpers\n * import { firestoreConnect } from 'react-redux-firebase'\n * export default firestoreConnect()(SomeComponent)\n * @example <caption>Basic</caption>\n * import { connect } from 'react-redux'\n * import { firestoreConnect } from 'react-redux-firebase'\n *\n * // pass todos list from redux as props.todosList\n * export default compose(\n *   firestoreConnect(() => ['todos']), // sync todos collection from Firestore into redux\n *   connect((state) => ({\n *     todosList: state.firestore.data.todos\n *   })\n * )(SomeComponent)\n */\nexport default function firestoreConnect(queriesConfig = []) {\n  return WrappedComponent => {\n    class FirestoreConnectWrapped extends Component {\n      static wrappedComponent = WrappedComponent\n      static displayName = wrapDisplayName(\n        WrappedComponent,\n        'FirestoreConnectWrapped'\n      )\n\n      prevData = null\n\n      get firestoreIsEnabled() {\n        return !!this.props.firestore\n      }\n\n      componentDidMount() {\n        if (this.firestoreIsEnabled) {\n          // Listener configs as object (handling function being passed)\n          const inputAsFunc = createCallable(queriesConfig)\n          this.prevData = inputAsFunc(this.props, this.props)\n          // Attach listeners based on listener config\n          this.props.firestore.setListeners(this.prevData)\n        }\n      }\n\n      componentWillUnmount() {\n        if (this.firestoreIsEnabled && this.prevData) {\n          this.props.firestore.unsetListeners(this.prevData)\n        }\n      }\n\n      /* eslint-disable camelcase */\n      UNSAFE_componentWillReceiveProps(np) {\n        /* eslint-enable camelcase */\n        const { firestore } = this.props\n        const inputAsFunc = createCallable(queriesConfig)\n        const data = inputAsFunc(np, this.props)\n\n        // Check for changes in the listener configs\n        if (this.firestoreIsEnabled && !isEqual(data, this.prevData)) {\n          const changes = getChanges(data, this.prevData)\n\n          this.prevData = data\n\n          // Remove listeners for inactive subscriptions\n          firestore.unsetListeners(changes.removed)\n\n          // Add listeners for new subscriptions\n          firestore.setListeners(changes.added)\n        }\n      }\n\n      render() {\n        return <WrappedComponent {...this.props} />\n      }\n    }\n\n    FirestoreConnectWrapped.propTypes = {\n      dispatch: PropTypes.func.isRequired,\n      firebase: PropTypes.object,\n      firestore: PropTypes.object\n    }\n\n    /**\n     * Render component wrapped in context\n     * @param {object} props - Component props\n     * @returns {React.Component} Component wrapped in context\n     */\n    function FirestoreConnectWithContext(props) {\n      return (\n        <ReactReduxFirebaseContext.Consumer>\n          {_internalFirebase => (\n            <ReduxFirestoreContext.Consumer>\n              {_internalFirestore => (\n                <FirestoreConnectWrapped\n                  {...props}\n                  dispatch={_internalFirebase.dispatch}\n                  firestore={_internalFirestore}\n                  firebase={_internalFirebase}\n                />\n              )}\n            </ReduxFirestoreContext.Consumer>\n          )}\n        </ReactReduxFirebaseContext.Consumer>\n      )\n    }\n\n    FirestoreConnectWithContext.displayName = wrapDisplayName(\n      WrappedComponent,\n      'FirestoreConnect'\n    )\n\n    FirestoreConnectWithContext.wrappedComponent = WrappedComponent\n\n    return hoistStatics(FirestoreConnectWithContext, WrappedComponent)\n  }\n}\n"],"file":"firestoreConnect.js"}