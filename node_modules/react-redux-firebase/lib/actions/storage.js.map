{"version":3,"sources":["../../src/actions/storage.js"],"names":["FILE_UPLOAD_START","actionTypes","FILE_UPLOAD_ERROR","FILE_UPLOAD_COMPLETE","FILE_DELETE_START","FILE_DELETE_ERROR","FILE_DELETE_COMPLETE","uploadFile","dispatch","firebase","config","storage","Error","path","file","dbPath","options","progress","fileMetadata","metadata","logErrors","_","nameFromOptions","name","filename","meta","type","payload","uploadPromise","ref","put","then","uploadTaskSnapshot","database","firestore","uploadTaskSnaphot","catch","err","console","error","message","Promise","reject","uploadFiles","files","other","all","deleteFile","method","deleteFileFromFb","args","types"],"mappings":"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","sourcesContent":["import { map } from 'lodash'\nimport { actionTypes } from '../constants'\nimport { wrapInDispatch } from '../utils/actions'\nimport {\n  deleteFile as deleteFileFromFb,\n  writeMetadataToDb,\n  uploadFileWithProgress\n} from '../utils/storage'\n\nconst {\n  FILE_UPLOAD_START,\n  FILE_UPLOAD_ERROR,\n  FILE_UPLOAD_COMPLETE,\n  FILE_DELETE_START,\n  FILE_DELETE_ERROR,\n  FILE_DELETE_COMPLETE\n} = actionTypes\n\n/**\n * Upload file to Firebase Storage with option to store\n * file metadata within Firebase Database\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {object} config - Config object\n * @param {string} config.path - Location within Firebase Stroage at which to upload files.\n * @param {Blob} config.file - File Blob to be uploaded\n * @param {string} config.dbPath - Datbase path to write file meta data to\n * @param {object} config.options - Options\n * @param {string|Function} config.options.name - Name of file. If a function\n * is provided it recieves (fileObject, internalFirebase, config) as arguments.\n * @param {object} config.options.metdata - Metadata for file to be passed along\n * to storage.put calls\n * @returns {Promise} Resolves with meta object\n * @private\n */\nexport function uploadFile(dispatch, firebase, config) {\n  if (!firebase.storage) {\n    throw new Error('Firebase storage is required to upload files')\n  }\n  const { path, file, dbPath, options = { progress: false } } = config || {}\n  const { metadata: fileMetadata } = options || {}\n  const { logErrors } = firebase._.config\n\n  // File renaming through options (supporting string and function)\n  const nameFromOptions =\n    typeof options.name === 'function'\n      ? options.name(file, firebase, config)\n      : options.name\n  const filename = nameFromOptions || file.name\n\n  const meta = { ...config, filename }\n\n  // Dispatch start action\n  dispatch({ type: FILE_UPLOAD_START, payload: { ...config, filename } })\n\n  const uploadPromise = () =>\n    options.progress\n      ? uploadFileWithProgress(dispatch, firebase, {\n          path,\n          file,\n          filename,\n          meta,\n          fileMetadata\n        })\n      : firebase\n          .storage()\n          .ref(`${path}/${filename}`)\n          .put(file, fileMetadata)\n\n  return uploadPromise()\n    .then(uploadTaskSnapshot => {\n      if (!dbPath || (!firebase.database && !firebase.firestore)) {\n        dispatch({\n          type: FILE_UPLOAD_COMPLETE,\n          meta: { ...config, filename },\n          payload: {\n            uploadTaskSnapshot,\n            uploadTaskSnaphot: uploadTaskSnapshot // Preserving legacy typo\n          }\n        })\n        return {\n          uploadTaskSnapshot,\n          uploadTaskSnaphot: uploadTaskSnapshot // Preserving legacy typo\n        }\n      }\n\n      // Write File metadata to either Real Time Database or Firestore (depending on config)\n      return writeMetadataToDb({\n        firebase,\n        uploadTaskSnapshot,\n        dbPath,\n        options\n      }).then(payload => {\n        dispatch({\n          type: FILE_UPLOAD_COMPLETE,\n          meta: { ...config, filename },\n          payload\n        })\n        return payload\n      })\n    })\n    .catch(err => {\n      if (logErrors) {\n        /* eslint-disable no-console */\n        console.error &&\n          console.error(`RRF: Error uploading file: ${err.message || err}`, err)\n        /* eslint-enable no-console */\n      }\n      dispatch({ type: FILE_UPLOAD_ERROR, path, payload: err })\n      return Promise.reject(err)\n    })\n}\n\n/**\n * Upload multiple files to Firebase Storage with option to store\n * file's metadata within Firebase Database\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {object} opts - Options object\n * @param {string} opts.path - Storage path to write files to\n * @param {Array} opts.files - List of files to be uploaded\n * @param {string} opts.dbPath - Datbase path to write file meta data to\n * @returns {Promise} Resolves with array of meta objects\n * @private\n */\nexport function uploadFiles(dispatch, firebase, { files, ...other }) {\n  return Promise.all(\n    map(files, file => uploadFile(dispatch, firebase, { file, ...other }))\n  )\n}\n\n/**\n * Delete File from Firebase Storage with option to remove meta\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {object} opts - Options object\n * @param {string} opts.path - Storage path to write files to\n * @param {string} opts.dbPath - Datbase path to write file meta data to\n * @returns {Promise} Resolves with results of deleting a file from storage\n * @private\n */\nexport function deleteFile(dispatch, firebase, { path, dbPath }) {\n  return wrapInDispatch(dispatch, {\n    method: deleteFileFromFb,\n    args: [firebase, { path, dbPath }],\n    types: [FILE_DELETE_START, FILE_DELETE_COMPLETE, FILE_DELETE_ERROR]\n  })\n}\n"],"file":"storage.js"}