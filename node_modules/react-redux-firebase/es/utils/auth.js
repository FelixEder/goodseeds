"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getLoginMethodAndParams=getLoginMethodAndParams,exports.getReauthenticateMethodAndParams=getReauthenticateMethodAndParams,exports.authIsReady=authIsReady,exports.createAuthIsReady=createAuthIsReady,exports.updateProfileOnRTDB=updateProfileOnRTDB,exports.updateProfileOnFirestore=updateProfileOnFirestore,exports.setupPresence=setupPresence;var _capitalize2=_interopRequireDefault(require("lodash/capitalize")),_constants=require("../constants");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function createAuthProvider(firebase,providerName,scopes){var capitalProviderName="".concat((0,_capitalize2.default)(providerName),"AuthProvider");if(!firebase.auth[capitalProviderName])throw new Error("".concat(providerName," is not a valid auth provider for your firebase instance. If using react-native, use a RN specific auth library."));var provider=new firebase.auth[capitalProviderName],customAuthParameters=firebase._.config.customAuthParameters;return(customAuthParameters&&customAuthParameters[providerName]&&provider.setCustomParameters(customAuthParameters[providerName]),"twitter"===providerName.toLowerCase()||"function"!=typeof provider.addScope)?provider:(provider.addScope("email"),scopes&&(Array.isArray(scopes)&&scopes.forEach(function(scope){provider.addScope(scope)}),("string"==typeof scopes||scopes instanceof String)&&provider.addScope(scopes)),provider)}function getLoginMethodAndParams(firebase,credentials){var email=credentials.email,password=credentials.password,provider=credentials.provider,type=credentials.type,token=credentials.token,scopes=credentials.scopes,phoneNumber=credentials.phoneNumber,applicationVerifier=credentials.applicationVerifier,credential=credentials.credential;if(credential){var credentialAuth=firebase.auth().signInAndRetrieveDataWithCredential;return credentialAuth?{method:"signInAndRetrieveDataWithCredential",params:[credential]}:{method:"signInWithCredential",params:[credential]}}if(provider){if(-1===_constants.supportedAuthProviders.indexOf(provider.toLowerCase()))throw new Error("".concat(provider," is not a valid Auth Provider"));if(token)throw new Error("provider with token no longer supported, use credential parameter instead");var authProvider=createAuthProvider(firebase,provider,scopes);return"popup"===type?{method:"signInWithPopup",params:[authProvider]}:{method:"signInWithRedirect",params:[authProvider]}}if(token){var tokenAuth=firebase.auth().signInAndRetrieveDataWithCustomToken;return tokenAuth?{method:"signInAndRetrieveDataWithCustomToken",params:[token]}:{method:"signInWithCustomToken",params:[token]}}if(phoneNumber){if(!applicationVerifier)throw new Error("Application verifier is required for phone authentication");return{method:"signInWithPhoneNumber",params:[phoneNumber,applicationVerifier]}}return firebase.auth().signInWithEmailAndPassword?{method:"signInWithEmailAndPassword",params:[email,password]}:{method:"signInAndRetrieveDataWithEmailAndPassword",params:[email,password]}}function getReauthenticateMethodAndParams(firebase,credentials){var provider=credentials.provider,type=credentials.type,scopes=credentials.scopes,phoneNumber=credentials.phoneNumber,applicationVerifier=credentials.applicationVerifier,credential=credentials.credential;if(credential){var credentialAuth=firebase.auth().reauthenticateAndRetrieveDataWithCredential;return credentialAuth?{method:"reauthenticateAndRetrieveDataWithCredential",params:[credential]}:{method:"reauthenticateWithCredential",params:[credential]}}if(provider){if(-1===_constants.supportedAuthProviders.indexOf(provider.toLowerCase()))throw new Error("".concat(provider," is not a valid Auth Provider"));var authProvider=createAuthProvider(firebase,provider,scopes);return"popup"===type?{method:"reauthenticateWithPopup",params:[authProvider]}:{method:"reauthenticateWithRedirect",params:[authProvider]}}if(!applicationVerifier)throw new Error("Application verifier is required for phone authentication");return{method:"reauthenticateWithPhoneNumber",params:[phoneNumber,applicationVerifier]}}function isAuthReady(store,stateName){var state=store.getState(),firebaseState=stateName?state[stateName]:state,firebaseAuthState=firebaseState&&firebaseState.auth;if(!firebaseAuthState)throw new Error("The Firebase auth state could not be found in the store under the attribute '".concat(stateName?"".concat(stateName,"."):"","auth'. Make sure your react-redux-firebase reducer is correctly set in the store"));return firebaseState.auth.isLoaded}function authIsReady(store){var stateName=1<arguments.length&&arguments[1]!==void 0?arguments[1]:"firebase";return new Promise(function(resolve){if(isAuthReady(store,stateName))resolve();else var unsubscribe=store.subscribe(function(){isAuthReady(store,stateName)&&(unsubscribe(),resolve())})})}function createAuthIsReady(store,config){return"function"==typeof config.authIsReady?config.authIsReady(store,config):authIsReady(store,config.firebaseStateName)}function updateProfileOnRTDB(firebase,profileUpdate){var _firebase$_=firebase._,config=_firebase$_.config,authUid=_firebase$_.authUid,profileRef=firebase.database().ref("".concat(config.userProfile,"/").concat(authUid));return profileRef.update(profileUpdate).then(function(){return profileRef.once("value")})}function updateProfileOnFirestore(firebase,profileUpdate){var options=2<arguments.length&&arguments[2]!==void 0?arguments[2]:{},_options$useSet=options.useSet,_options$merge=options.merge,firestore=firebase.firestore,_firebase$_2=firebase._,config=_firebase$_2.config,authUid=_firebase$_2.authUid,profileRef=firestore().doc("".concat(config.userProfile,"/").concat(authUid)),profileUpdatePromise=!(void 0!==_options$useSet)||_options$useSet?profileRef.set(profileUpdate,{merge:!(void 0!==_options$merge)||_options$merge}):profileRef.update(profileUpdate);return profileUpdatePromise.then(function(){return profileRef.get()})}function setupPresence(dispatch,firebase){if(firebase.database&&firebase.database.ServerValue){var ref=firebase.database().ref(),_firebase$_3=firebase._,_firebase$_3$config=_firebase$_3.config,presence=_firebase$_3$config.presence,sessions=_firebase$_3$config.sessions,authUid=_firebase$_3.authUid,amOnline=ref.child(".info/connected"),onlineRef=ref.child("function"==typeof presence?presence(firebase.auth().currentUser,firebase):presence).child(authUid),sessionsRef="function"==typeof sessions?sessions(firebase.auth().currentUser,firebase):sessions;sessionsRef&&(sessionsRef=ref.child(sessions)),amOnline.on("value",function(snapShot){if(snapShot.val()){if(sessionsRef){dispatch({type:_constants.actionTypes.SESSION_START,payload:authUid});var session=sessionsRef.push({startedAt:firebase.database.ServerValue.TIMESTAMP,user:authUid});"function"==typeof session.setPriority&&session.setPriority(authUid),session.child("endedAt").onDisconnect().set(firebase.database.ServerValue.TIMESTAMP,function(){dispatch({type:_constants.actionTypes.SESSION_END})})}onlineRef.set(!0),onlineRef.onDisconnect().remove()}})}}
//# sourceMappingURL=auth.js.map