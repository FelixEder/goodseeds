{"version":3,"sources":["../../src/utils/query.js"],"names":["tryParseToNumber","value","result","getWatchPath","event","path","Error","substring","getQueryIdFromPath","origPath","pathSplitted","split","isQuery","length","queryParams","queryId","map","param","splittedParam","filter","q","setWatcher","firebase","dispatch","id","_","watchers","type","actionTypes","SET_LISTENER","payload","getWatcherCount","unsetWatcher","database","ref","child","off","UNSET_LISTENER","applyParamsToQuery","query","doNotParse","forEach","orderByValue","orderByPriority","orderByKey","orderByChild","limitToFirst","parseInt","limitToLast","equalToParam","equalTo","startAtParam","startAt","endAtParam","endAt","orderedFromSnapshot","snap","hasChildren","ordered","push","key","val","populateAndDispatch","config","data","populates","snapshot","storeAs","then","results","MERGE","SET","catch","err","ERROR","Promise","reject"],"mappings":"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","sourcesContent":["import { actionTypes } from '../constants'\nimport { promisesForPopulate } from './populate'\nimport { isNaN, forEach } from 'lodash'\nimport { isString } from './index'\n\n/**\n * @private\n * Try to parse passed input to a number. If it is not a number return itself.\n * @param {string|number} value - Item to attempt to parse to a number\n * @returns {any} Number if parse to number was successful, otherwise,\n * original value\n */\nfunction tryParseToNumber(value) {\n  const result = Number(value)\n  if (isNaN(result)) {\n    return value\n  }\n  return result\n}\n\n/**\n * @private\n * Get path to watch provided event type and path.\n * @param {string} event - Type of event to watch for\n * @param {string} path - Path to watch with watcher\n * @returns {string} watchPath\n */\nexport function getWatchPath(event, path) {\n  if (!event || event === '' || !path) {\n    throw new Error('Event and path are required')\n  }\n  return `${event}:${path.substring(0, 1) === '/' ? '' : '/'}${path}`\n}\n\n/**\n * @private\n * Get query id from query path. queryId paramter is\n * later used to add/remove listeners from internal firebase instance.\n * @param {string} path - Path from which to get query id\n * @param {string} event - Type of query event\n * @returns {string} Query id\n */\nexport function getQueryIdFromPath(path, event) {\n  if (!isString(path)) {\n    throw new Error('Query path must be a string')\n  }\n  const origPath = path\n  let pathSplitted = path.split('#')\n  path = pathSplitted[0]\n\n  const isQuery = pathSplitted.length > 1\n  const queryParams = isQuery ? pathSplitted[1].split('&') : []\n  const queryId = isQuery\n    ? queryParams\n        .map(param => {\n          let splittedParam = param.split('=')\n          // Handle query id in path\n          if (splittedParam[0] === 'queryId') {\n            return splittedParam[1]\n          }\n        })\n        .filter(q => q)\n    : undefined\n  return queryId && queryId.length > 0\n    ? event ? `${event}:/${queryId}` : queryId[0]\n    : isQuery ? origPath : undefined\n}\n\n/**\n * @private\n * Update the number of watchers for a query\n * @param {object} firebase - Internal firebase object\n * @param {Function} dispatch - Redux dispatch function\n * @param {string} event - Type of event to watch for\n * @param {string} path - Path to watch with watcher\n * @param {string} queryId - Id of query\n * @returns {number} watcherCount - count\n */\nexport function setWatcher(firebase, dispatch, event, path, queryId) {\n  const id =\n    queryId || getQueryIdFromPath(path, event) || getWatchPath(event, path)\n\n  if (firebase._.watchers[id]) {\n    firebase._.watchers[id]++\n  } else {\n    firebase._.watchers[id] = 1\n  }\n\n  dispatch({ type: actionTypes.SET_LISTENER, path, payload: { id } })\n\n  return firebase._.watchers[id]\n}\n\n/**\n * @private\n * Get count of currently attached watchers\n * @param {object} firebase - Internal firebase object\n * @param {string} event - Type of event to watch for\n * @param {string} path - Path to watch with watcher\n * @param {string} queryId - Id of query\n * @returns {number} watcherCount\n */\nexport function getWatcherCount(firebase, event, path, queryId) {\n  const id =\n    queryId || getQueryIdFromPath(path, event) || getWatchPath(event, path)\n  return firebase._.watchers[id]\n}\n\n/**\n * @private\n * Remove/Unset a watcher\n * @param {object} firebase - Internal firebase object\n * @param {Function} dispatch - Redux's dispatch function\n * @param {string} event - Type of event to watch for\n * @param {string} path - Path to watch with watcher\n * @param {string} queryId - Id of query\n */\nexport function unsetWatcher(firebase, dispatch, event, path, queryId) {\n  let id =\n    queryId || getQueryIdFromPath(path, event) || getWatchPath(event, path)\n  path = path.split('#')[0]\n  const { watchers } = firebase._\n  if (watchers[id] <= 1) {\n    delete watchers[id]\n    if (event !== 'first_child' && event !== 'once') {\n      firebase\n        .database()\n        .ref()\n        .child(path)\n        .off(event)\n    }\n  } else if (watchers[id]) {\n    watchers[id]--\n  }\n\n  dispatch({ type: actionTypes.UNSET_LISTENER, path, payload: { id } })\n}\n\n/**\n * Modify query to include methods based on query parameters (such\n * as orderByChild).\n * @param {Array} queryParams - Array of query parameters to apply to query\n * @param {object} query - Query object on which to apply query parameters\n * @returns {firebase.database.Query} Query with query params applied\n */\nexport function applyParamsToQuery(queryParams, query) {\n  let doNotParse = false\n  if (queryParams) {\n    queryParams.forEach(param => {\n      param = param.split('=')\n      switch (param[0]) {\n        case 'orderByValue':\n          query = query.orderByValue()\n          doNotParse = true\n          break\n        case 'orderByPriority':\n          query = query.orderByPriority()\n          doNotParse = true\n          break\n        case 'orderByKey':\n          query = query.orderByKey()\n          doNotParse = true\n          break\n        case 'orderByChild':\n          query = query.orderByChild(param[1])\n          break\n        case 'limitToFirst':\n          // TODO: Handle number not being passed as param\n          query = query.limitToFirst(parseInt(param[1], 10))\n          break\n        case 'limitToLast':\n          // TODO: Handle number not being passed as param\n          query = query.limitToLast(parseInt(param[1], 10))\n          break\n        case 'notParsed':\n          // support disabling internal number parsing (number strings)\n          doNotParse = true\n          break\n        case 'parsed':\n          // support disabling internal number parsing (number strings)\n          doNotParse = false\n          break\n        case 'equalTo':\n          let equalToParam = !doNotParse ? tryParseToNumber(param[1]) : param[1]\n          equalToParam = equalToParam === 'null' ? null : equalToParam\n          equalToParam = equalToParam === 'false' ? false : equalToParam\n          equalToParam = equalToParam === 'true' ? true : equalToParam\n          query =\n            param.length === 3\n              ? query.equalTo(equalToParam, param[2])\n              : query.equalTo(equalToParam)\n          break\n        case 'startAt':\n          let startAtParam = !doNotParse ? tryParseToNumber(param[1]) : param[1]\n          startAtParam = startAtParam === 'null' ? null : startAtParam\n          query =\n            param.length === 3\n              ? query.startAt(startAtParam, param[2])\n              : query.startAt(startAtParam)\n          break\n        case 'endAt':\n          let endAtParam = !doNotParse ? tryParseToNumber(param[1]) : param[1]\n          endAtParam = endAtParam === 'null' ? null : endAtParam\n          query =\n            param.length === 3\n              ? query.endAt(endAtParam, param[2])\n              : query.endAt(endAtParam)\n          break\n      }\n    })\n  }\n\n  return query\n}\n\n/**\n * Get ordered array from snapshot\n * @param {firebase.database.DataSnapshot} snap - Data for which to create\n * an ordered array.\n * @returns {Array|null} Ordered list of children from snapshot or null\n */\nexport function orderedFromSnapshot(snap) {\n  if (snap.hasChildren && !snap.hasChildren()) {\n    return null\n  }\n  const ordered = []\n  if (snap.forEach) {\n    snap.forEach(child => {\n      ordered.push({ key: child.key, value: child.val() })\n    })\n  }\n  return ordered.length ? ordered : null\n}\n\n/**\n * Get data associated with populate settings, and dispatch\n *\n * @param {object} firebase - Internal firebase object\n * @param {Function} dispatch - Redux's dispatch function\n * @param {object} config - Config object\n * @param {any} config.data - Original query data result\n * @param {Array} config.populates - List of populate settings\n * @param {string} config.path - Base query path\n * @param {string} config.storeAs - Location within redux in which to\n * query results will be stored (path is used as default if not provided).\n * @returns {Promise} Promise that resolves after data for populates has been\n * loaded and associated actions have been dispatched\n * @private\n */\nexport function populateAndDispatch(firebase, dispatch, config) {\n  const { data, populates, snapshot, path, storeAs } = config\n  // TODO: Allow setting of unpopulated data before starting population through config\n  return promisesForPopulate(firebase, snapshot.key, data, populates)\n    .then(results => {\n      // dispatch child sets first so isLoaded is only set to true for\n      // populatedDataToJS after all data is in redux (Issue #121)\n      // TODO: Allow config to toggle Combining into one SET action\n      // TODO: Set ordered for populate queries\n      forEach(results, (result, path) => {\n        dispatch({\n          type: actionTypes.MERGE,\n          path,\n          data: result\n        })\n      })\n      dispatch({\n        type: actionTypes.SET,\n        path: storeAs || path,\n        data,\n        ordered: orderedFromSnapshot(snapshot)\n      })\n      return results\n    })\n    .catch(err => {\n      dispatch({\n        type: actionTypes.ERROR,\n        payload: err\n      })\n      return Promise.reject(err)\n    })\n}\n"],"file":"query.js"}