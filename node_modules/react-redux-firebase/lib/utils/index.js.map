{"version":3,"sources":["../../src/utils/index.js"],"names":["isString","varToCheck","String","createCallable","f","invokeArrayQuery","props","result","Array","isArray","getDisplayName","Component","displayName","name","wrapDisplayName","BaseComponent","hocName","getChanges","data","prevData","added","d","p","removed"],"mappings":"0sBAQO,QAASA,CAAAA,QAAT,CAAkBC,UAAlB,CAA8B,CACnC,MAA6B,QAAtB,QAAOA,CAAAA,UAAP,EAAkCA,UAAU,WAAYC,CAAAA,MAChE,CAQM,QAASC,CAAAA,cAAT,CAAwBC,CAAxB,CAA2B,CAChC,MAAoB,UAAb,QAAOA,CAAAA,CAAP,CAA0BA,CAA1B,CAA8B,uBAASA,CAAT,CACtC,CASM,QAASC,CAAAA,gBAAT,CAA0BD,CAA1B,CAA6BE,KAA7B,CAAoC,CACzC,GAAMC,CAAAA,MAAM,CAAGJ,cAAc,CAACC,CAAD,CAAd,CAAkBE,KAAlB,CAAf,CADyC,MAErCE,CAAAA,KAAK,CAACC,OAAN,CAAcF,MAAd,CAFqC,CAGhCA,MAHgC,CAKpCA,MALoC,CAQlC,CAACA,MAAD,CARkC,CAMhC,IAGV,CASD,QAASG,CAAAA,cAAT,CAAwBC,SAAxB,CAAmC,OACR,QAArB,QAAOA,CAAAA,SADsB,CAExBA,SAFwB,CAK5BA,SAL4B,CAS1BA,SAAS,CAACC,WAAV,EAAyBD,SAAS,CAACE,IAAnC,EAA2C,WATjB,OAUlC,CAQM,QAASC,CAAAA,eAAT,CAAyBC,aAAzB,CAAwCC,OAAxC,CAAiD,CACtD,gBAAUA,OAAV,aAAqBN,cAAc,CAACK,aAAD,CAAnC,KACD,CAQM,QAASE,CAAAA,UAAT,EAA8C,IAA1BC,CAAAA,IAA0B,wDAAnB,EAAmB,CAAfC,QAAe,wDAAJ,EAAI,CAC7CZ,MAAM,CAAG,EADoC,CAInD,MAFAA,CAAAA,MAAM,CAACa,KAAP,CAAe,qBAAOF,IAAP,CAAa,SAAAG,CAAC,QAAI,CAAC,mBAAKF,QAAL,CAAe,SAAAG,CAAC,QAAI,sBAAQD,CAAR,CAAWC,CAAX,CAAJ,CAAhB,CAAL,CAAd,CAEf,CADAf,MAAM,CAACgB,OAAP,CAAiB,qBAAOJ,QAAP,CAAiB,SAAAG,CAAC,QAAI,CAAC,mBAAKJ,IAAL,CAAW,SAAAG,CAAC,QAAI,sBAAQC,CAAR,CAAWD,CAAX,CAAJ,CAAZ,CAAL,CAAlB,CACjB,CAAOd,MACR","sourcesContent":["import { constant, isEqual, some, filter } from 'lodash'\nexport { getEventsFromInput } from './events'\n\n/**\n * Check to see if a variable is a string\n * @param {any} varToCheck - Variable to check for type string\n * @returns {boolean} Whether or not the provided value is a string\n */\nexport function isString(varToCheck) {\n  return typeof varToCheck === 'string' || varToCheck instanceof String\n}\n\n/**\n * @private\n * Create a function if not already one\n * @param {Function|object|Array|string} f function or value of return for new function\n * @returns {any} Callable\n */\nexport function createCallable(f) {\n  return typeof f === 'function' ? f : constant(f)\n}\n\n/**\n * Invoke function or handle existing array to create array\n * query settings\n * @param {any} f - Function or array of queries\n * @param {object} props - Component props\n * @returns {Array|null} Array of query settings\n */\nexport function invokeArrayQuery(f, props) {\n  const result = createCallable(f)(props)\n  if (Array.isArray(result)) {\n    return result\n  }\n  if (!result) {\n    return null\n  }\n  return [result]\n}\n\n/**\n * Get the displayName field of a component falling\n * back to name field then finally to \"component\".\n * @param {React.Component} Component - Component from\n * which to get displayName\n * @returns {string} Display name of component\n */\nfunction getDisplayName(Component) {\n  if (typeof Component === 'string') {\n    return Component\n  }\n\n  if (!Component) {\n    return undefined\n  }\n\n  return Component.displayName || Component.name || 'Component'\n}\n\n/**\n * Get provided react component's display name and wrap with with a passed name.\n * @param {React.Component} BaseComponent - Component from which to get name to wrap\n * @param {string} hocName - Name of wrapping hoc\n * @returns {string} Wrapped display name for component\n */\nexport function wrapDisplayName(BaseComponent, hocName) {\n  return `${hocName}(${getDisplayName(BaseComponent)})`\n}\n\n/**\n * Get changes between two query settings arrays\n * @param {Array} data - Query settings array\n * @param {Array} prevData - Previous query settings array\n * @returns {object} Object containing added and removed value changes\n */\nexport function getChanges(data = [], prevData = []) {\n  const result = {}\n  result.added = filter(data, d => !some(prevData, p => isEqual(d, p)))\n  result.removed = filter(prevData, p => !some(data, d => isEqual(p, d)))\n  return result\n}\n"],"file":"index.js"}