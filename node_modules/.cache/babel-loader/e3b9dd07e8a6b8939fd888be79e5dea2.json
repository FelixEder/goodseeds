{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.default = useFirestoreConnect;\n\nvar _isEqual2 = _interopRequireDefault(require(\"lodash/isEqual\")),\n    _react = require(\"react\"),\n    _utils = require(\"./utils\"),\n    _useFirestore = _interopRequireDefault(require(\"./useFirestore\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction useFirestoreConnect(queriesConfigs) {\n  var firestore = (0, _useFirestore.default)(),\n      firestoreIsEnabled = !!firestore,\n      queryRef = (0, _react.useRef)(),\n      data = (0, _react.useMemo)(function () {\n    return (0, _utils.invokeArrayQuery)(queriesConfigs);\n  }, [queriesConfigs]);\n  (0, _react.useEffect)(function () {\n    if (firestoreIsEnabled && !(0, _isEqual2.default)(data, queryRef.current)) {\n      var changes = (0, _utils.getChanges)(data, queryRef.current);\n      queryRef.current = data, firestore.unsetListeners(changes.removed), firestore.setListeners(changes.added);\n    }\n  }, [data]), (0, _react.useEffect)(function () {\n    return function () {\n      firestoreIsEnabled && queryRef.current && firestore.unsetListeners(queryRef.current);\n    };\n  }, []);\n}\n\nmodule.exports = exports.default;","map":{"version":3,"sources":["../src/useFirestoreConnect.js"],"names":["firestore","firestoreIsEnabled","queryRef","data","changes"],"mappings":";;;;;;;;;;;;;;;AAgDe;;AAAA,SAAA,mBAAA,CAAA,cAAA,EAA6C;AAAA,MACpDA,SAAS,GAAG,CAAA,GAAA,aAAA,CADwC,OACxC,GADwC;AAAA,MAEpDC,kBAAkB,GAAG,CAAC,CAF8B,SAAA;AAAA,MAGpDC,QAAQ,GAAG,CAAA,GAAA,MAAA,CAHyC,MAGzC,GAHyC;AAAA,MAKpDC,IAAI,GAAG,CAAA,GAAA,MAAA,CAAA,OAAA,EAAQ,YAAA;AAAA,WAAM,CAAA,GAAA,MAAA,CAAA,gBAAA,EAAN,cAAM,CAAN;AAAR,GAAA,EAAgD,CALH,cAKG,CAAhD,CAL6C;AAO1D,GAAA,GAAA,MAAA,CAAA,SAAA,EACE,YAAM;AACJ,QAAIF,kBAAkB,IAAI,CAAC,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,IAAA,EAAcC,QAAQ,CAAjD,OAA2B,CAA3B,EAA4D;AAC1D,UAAME,OAAO,GAAG,CAAA,GAAA,MAAA,CAAA,UAAA,EAAA,IAAA,EAAiBF,QAAQ,CAAzC,OAAgB,CAAhB;AAEAA,MAAAA,QAAQ,CAARA,OAAAA,GAH0D,IAG1DA,EAGAF,SAAS,CAATA,cAAAA,CAAyBI,OAAO,CAN0B,OAM1DJ,CAHAE,EAMAF,SAAS,CAATA,YAAAA,CAAuBI,OAAO,CAA9BJ,KAAAA,CANAE;AAQH;AAbH,GAAA,EAcE,CArBwD,IAqBxD,CAdF,GAkBA,CAAA,GAAA,MAAA,CAAA,SAAA,EAAU,YAAM;AACd,WAAO,YAAM;AACPD,MAAAA,kBAAkB,IAAIC,QAAQ,CADvB,OACPD,IACFD,SAAS,CAATA,cAAAA,CAAyBE,QAAQ,CAAjCF,OAAAA,CADEC;AAIP,KALC;AADF,GAAA,EAAA,EAAA,CAlBA","sourcesContent":["import { isEqual } from 'lodash'\nimport { useRef, useMemo, useEffect } from 'react'\nimport { invokeArrayQuery, getChanges } from './utils'\nimport useFirestore from './useFirestore'\n\n/**\n * @description React hook that automatically listens/unListens\n * to provided Cloud Firestore paths. Make sure you have required/imported\n * Cloud Firestore, including it's reducer, before attempting to use.\n * **Note** Populate is not yet supported.\n * @param {object|string|Array|Function} queriesConfigs - An object, string,\n * or array of object or string for paths to sync from firestore. Can also be\n * a function that returns the object, string, or array of object or string.\n * @see https://react-redux-firebase.com/docs/api/useFirestoreConnect.html\n * @example <caption>Basic</caption>\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n * import { useFirestoreConnect } from 'react-redux-firebase'\n *\n * export default function TodosList() {\n *   useFirestoreConnect('todos') // sync todos collection from Firestore into redux\n *   const todos = useSelector(state => state.firestore.data.todos)\n *   return (\n *     <ul>\n *       {todos &&\n *         todos.map((todo) => (\n *           <li>id: {todo.id} todo: {todo.description}</li>\n *         ))}\n *    </ul>\n *   )\n * }\n * @example <caption>Object as query</caption>\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n * import { useFirestoreConnect } from 'react-redux-firebase'\n *\n * export default function TodoItem({ todoId }) {\n *   useFirestoreConnect([{\n *     collection: 'todos',\n *     doc: todoId\n *   }])\n *   const todo = useSelector(\n *     ({ firestore: { data } }) => data.todos && data.todos[todoId]\n *   )\n *\n *   return <div>{JSON.stringify(todo)}</div>\n * }\n */\nexport default function useFirestoreConnect(queriesConfigs) {\n  const firestore = useFirestore()\n  const firestoreIsEnabled = !!firestore\n  const queryRef = useRef()\n\n  const data = useMemo(() => invokeArrayQuery(queriesConfigs), [queriesConfigs])\n\n  useEffect(\n    () => {\n      if (firestoreIsEnabled && !isEqual(data, queryRef.current)) {\n        const changes = getChanges(data, queryRef.current)\n\n        queryRef.current = data\n\n        // Remove listeners for inactive subscriptions\n        firestore.unsetListeners(changes.removed)\n\n        // Add listeners for new subscriptions\n        firestore.setListeners(changes.added)\n      }\n    },\n    [data]\n  )\n\n  // Emulate componentWillUnmount\n  useEffect(() => {\n    return () => {\n      if (firestoreIsEnabled && queryRef.current) {\n        firestore.unsetListeners(queryRef.current)\n      }\n    }\n  }, [])\n}\n"]},"metadata":{},"sourceType":"script"}