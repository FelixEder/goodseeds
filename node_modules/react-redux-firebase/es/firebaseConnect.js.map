{"version":3,"sources":["../src/firebaseConnect.js"],"names":["firebaseConnect","queriesConfig","WrappedComponent","FirebaseConnectWithContext","props","_internalFirebase","dispatch","FirebaseConnectWrapped","firebase","inputAsFunc","prevData","ref","helpers","storage","database","auth","_firebaseEvents","np","data","store","itemsToSubscribe","itemsToUnsubscribe","Component","propTypes","PropTypes","func","isRequired","object","displayName","wrappedComponent"],"mappings":"ozIAwEe,QAASA,CAAAA,eAAT,EAA6C,IAApBC,CAAAA,aAAoB,wDAAJ,EAAI,CAC1D,MAAO,UAAAC,gBAAgB,CAAI,CA8EzB,QAASC,CAAAA,0BAAT,CAAoCC,KAApC,CAA2C,CACzC,MACE,8BAAC,kCAAD,CAA2B,QAA3B,MACG,SAAAC,iBAAiB,QAChB,8BAAC,sBAAD,aACMD,KADN,EAEE,QAAQ,CAAEC,iBAAiB,CAACC,QAF9B,CAGE,QAAQ,CAAED,iBAHZ,GADgB,CADpB,CAUH,CA1FwB,GACnBE,CAAAA,sBADmB,2bAQN,EARM,2DASZ,IATY,2DAUZ,IAVY,4JAYH,iBACa,KAAKH,KADlB,CACVI,QADU,aACVA,QADU,CACAF,QADA,aACAA,QADA,CAIZG,WAAW,CAAG,0BAAeR,aAAf,CAJF,CAKlB,KAAKS,QAAL,CAAgBD,WAAW,CAAC,KAAKL,KAAN,CAAa,KAAKA,KAAlB,CALT,IAOVO,CAAAA,GAPU,CAOgCH,QAPhC,CAOVG,GAPU,CAOLC,OAPK,CAOgCJ,QAPhC,CAOLI,OAPK,CAOIC,OAPJ,CAOgCL,QAPhC,CAOIK,OAPJ,CAOaC,QAPb,CAOgCN,QAPhC,CAOaM,QAPb,CAOuBC,IAPvB,CAOgCP,QAPhC,CAOuBO,IAPvB,CAQlB,KAAKP,QAAL,gBAAkBG,GAAG,CAAHA,GAAlB,CAAuBE,OAAO,CAAPA,OAAvB,CAAgCC,QAAQ,CAARA,QAAhC,CAA0CC,IAAI,CAAJA,IAA1C,EAAmDH,OAAnD,CARkB,CAUlB,KAAKI,eAAL,CAAuB,8BAAmB,KAAKN,QAAxB,CAVL,CAYlB,uBAAYF,QAAZ,CAAsBF,QAAtB,CAAgC,KAAKU,eAArC,CACD,CAzBsB,mEA2BA,kBACU,KAAKZ,KADf,CACbI,QADa,cACbA,QADa,CACHF,QADG,cACHA,QADG,CAErB,yBAAcE,QAAd,CAAwBF,QAAxB,CAAkC,KAAKU,eAAvC,CACD,CA9BsB,0FAiCUC,EAjCV,CAiCc,kBAEJ,KAAKb,KAFD,CAE3BI,QAF2B,cAE3BA,QAF2B,CAEjBF,QAFiB,cAEjBA,QAFiB,CAG7BG,WAAW,CAAG,0BAAeR,aAAf,CAHe,CAI7BiB,IAAI,CAAGT,WAAW,CAACQ,EAAD,CAAK,KAAKE,KAAV,CAJW,CAOnC,GAAI,CAAC,sBAAQD,IAAR,CAAc,KAAKR,QAAnB,CAAL,CAAmC,IAC3BU,CAAAA,gBAAgB,CAAG,6BAAeF,IAAf,CAAqB,KAAKR,QAA1B,mBADQ,CAE3BW,kBAAkB,CAAG,6BACzB,KAAKX,QADoB,CAEzBQ,IAFyB,mBAFM,CAQjC,KAAKR,QAAL,CAAgBQ,IARiB,CAUjC,yBACEV,QADF,CAEEF,QAFF,CAGE,8BAAmBe,kBAAnB,CAHF,CAViC,CAgBjC,KAAKL,eAAL,CAAuB,8BAAmBE,IAAnB,CAhBU,CAmBjC,uBAAYV,QAAZ,CAAsBF,QAAtB,CAAgC,8BAAmBc,gBAAnB,CAAhC,CACD,CACF,CA7DsB,uCA+Dd,CACP,MAAO,8BAAC,gBAAD,CAAsB,KAAKhB,KAA3B,CACR,CAjEsB,4BACYkB,gBADZ,EAmGzB,uBAlGMf,sBAkGN,eAjGuB,2BACnBL,gBADmB,CAEnB,wBAFmB,CAiGvB,kBAlGMK,sBAkGN,oBA7F4BL,gBA6F5B,EA/BAK,sBAAsB,CAACgB,SAAvB,CAAmC,CACjCjB,QAAQ,CAAEkB,mBAAUC,IAAV,CAAeC,UADQ,CAEjClB,QAAQ,CAAEgB,mBAAUG,MAAV,CAAiBD,UAFM,CA+BnC,CAPAvB,0BAA0B,CAACyB,WAA3B,CAAyC,2BACvC1B,gBADuC,CAEvC,iBAFuC,CAOzC,CAFAC,0BAA0B,CAAC0B,gBAA3B,CAA8C3B,gBAE9C,CAAO,kCAAaC,0BAAb,CAAyCD,gBAAzC,CACR,CACF,C","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { isEqual, differenceWith } from 'lodash'\nimport hoistStatics from 'hoist-non-react-statics'\nimport { watchEvents, unWatchEvents } from './actions/query'\nimport { getEventsFromInput, createCallable, wrapDisplayName } from './utils'\nimport ReactReduxFirebaseContext from './ReactReduxFirebaseContext'\n\n/**\n * @augments React.Component\n * @description React Higher Order Component that automatically listens/unListens to\n * Firebase Real Time Database on mount/unmount of the component. This uses\n * React's Component Lifecycle hooks.\n * @param {Array|Function} queriesConfig - Array of objects or strings for paths to sync\n * from Firebase. Can also be a function that returns the array. The function\n * is passed the current props and the firebase object.\n * @returns {Function} - that accepts a component to wrap and returns the wrapped component\n * @see https://react-redux-firebase.com/docs/api/firebaseConnect.html\n * @example <caption>Basic</caption>\n * // props.firebase set on App component as firebase object with helpers\n * import { firebaseConnect } from 'react-redux-firebase'\n * export default firebaseConnect()(App)\n * @example <caption>Ordered Data</caption>\n * import React from 'react'\n * import { compose } from 'redux'\n * import { connect } from 'react-redux'\n * import { firebaseConnect } from 'react-redux-firebase'\n *\n * const enhance = compose(\n *   firebaseConnect([\n *     'todos' // sync /todos from firebase into redux\n *   ]),\n *   connect((state) => ({\n *     todos: state.firebase.ordered.todos\n *   }))\n * )\n *\n * function Todos({ todos }) {\n *   return (\n *     <div>\n *       {JSON.stringify(todos, null, 2)}\n *     </div>\n *   )\n * }\n *\n * export default enhance(Todos)\n * @example <caption>Data that depends on props</caption>\n * import React from 'react'\n * import { compose } from 'redux'\n * import { connect } from 'react-redux'\n * import { get } from 'lodash'\n * import { firebaseConnect } from 'react-redux-firebase'\n *\n * const enhance = compose(\n *   firebaseConnect((props) => ([\n *     `posts/${props.postId}` // sync /posts/postId from firebase into redux\n *   ])),\n *   connect((state, props) => ({\n *     post: get(state.firebase.data, `posts.${props.postId}`),\n *   }))\n * )\n *\n * function Post({ post }) {\n *   return (\n *     <div>\n *      {JSON.stringify(post, null, 2)}\n *     </div>\n *   )\n * }\n *\n * export default enhance(Post)\n */\nexport default function firebaseConnect(queriesConfig = []) {\n  return WrappedComponent => {\n    class FirebaseConnectWrapped extends Component {\n      static displayName = wrapDisplayName(\n        WrappedComponent,\n        'FirebaseConnectWrapped'\n      )\n      static wrappedComponent = WrappedComponent\n\n      firebaseEvents = []\n      firebase = null\n      prevData = null\n\n      componentDidMount() {\n        const { firebase, dispatch } = this.props\n\n        // Allow function to be passed\n        const inputAsFunc = createCallable(queriesConfig)\n        this.prevData = inputAsFunc(this.props, this.props)\n\n        const { ref, helpers, storage, database, auth } = firebase\n        this.firebase = { ref, storage, database, auth, ...helpers }\n\n        this._firebaseEvents = getEventsFromInput(this.prevData)\n\n        watchEvents(firebase, dispatch, this._firebaseEvents)\n      }\n\n      componentWillUnmount() {\n        const { firebase, dispatch } = this.props\n        unWatchEvents(firebase, dispatch, this._firebaseEvents)\n      }\n\n      /* eslint-disable camelcase */\n      UNSAFE_componentWillReceiveProps(np) {\n        /* eslint-enable camelcase */\n        const { firebase, dispatch } = this.props\n        const inputAsFunc = createCallable(queriesConfig)\n        const data = inputAsFunc(np, this.store)\n\n        // Handle a data parameter having changed\n        if (!isEqual(data, this.prevData)) {\n          const itemsToSubscribe = differenceWith(data, this.prevData, isEqual)\n          const itemsToUnsubscribe = differenceWith(\n            this.prevData,\n            data,\n            isEqual\n          )\n\n          this.prevData = data\n          // UnWatch all current events\n          unWatchEvents(\n            firebase,\n            dispatch,\n            getEventsFromInput(itemsToUnsubscribe)\n          )\n          // Get watch events from new data\n          this._firebaseEvents = getEventsFromInput(data)\n\n          // Watch new events\n          watchEvents(firebase, dispatch, getEventsFromInput(itemsToSubscribe))\n        }\n      }\n\n      render() {\n        return <WrappedComponent {...this.props} />\n      }\n    }\n\n    FirebaseConnectWrapped.propTypes = {\n      dispatch: PropTypes.func.isRequired,\n      firebase: PropTypes.object.isRequired\n    }\n\n    /**\n     * Render component wrapped in context\n     * @param {object} props - Component props\n     * @returns {React.Component} Component wrapped in context\n     */\n    function FirebaseConnectWithContext(props) {\n      return (\n        <ReactReduxFirebaseContext.Consumer>\n          {_internalFirebase => (\n            <FirebaseConnectWrapped\n              {...props}\n              dispatch={_internalFirebase.dispatch}\n              firebase={_internalFirebase}\n            />\n          )}\n        </ReactReduxFirebaseContext.Consumer>\n      )\n    }\n\n    FirebaseConnectWithContext.displayName = wrapDisplayName(\n      WrappedComponent,\n      'FirebaseConnect'\n    )\n\n    FirebaseConnectWithContext.wrappedComponent = WrappedComponent\n\n    return hoistStatics(FirebaseConnectWithContext, WrappedComponent)\n  }\n}\n"],"file":"firebaseConnect.js"}