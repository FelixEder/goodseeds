{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.getPopulateObj = getPopulateObj, exports.getChildType = getChildType, exports.getPopulateObjs = getPopulateObjs, exports.getPopulates = getPopulates, exports.getPopulateChild = getPopulateChild, exports.populateList = populateList, exports.promisesForPopulate = promisesForPopulate;\n\nvar _some2 = _interopRequireDefault(require(\"lodash/some\")),\n    _has2 = _interopRequireDefault(require(\"lodash/has\")),\n    _set2 = _interopRequireDefault(require(\"lodash/set\")),\n    _forEach2 = _interopRequireDefault(require(\"lodash/forEach\")),\n    _get2 = _interopRequireDefault(require(\"lodash/get\")),\n    _map2 = _interopRequireDefault(require(\"lodash/map\")),\n    _isObject2 = _interopRequireDefault(require(\"lodash/isObject\")),\n    _filter2 = _interopRequireDefault(require(\"lodash/filter\")),\n    _index = require(\"./index\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getPopulateObj(str) {\n  if (!(0, _index.isString)(str)) return str;\n  var strArray = str.split(\":\");\n  return {\n    child: strArray[0],\n    root: strArray[1]\n  };\n}\n\nfunction getChildType(child) {\n  return (0, _index.isString)(child) ? \"string\" : Array.isArray(child) ? \"array\" : (0, _isObject2.default)(child) ? \"object\" : \"other\";\n}\n\nfunction getPopulateObjs(arr) {\n  return Array.isArray(arr) ? arr.map(function (o) {\n    return (0, _isObject2.default)(o) ? o : getPopulateObj(o);\n  }) : arr;\n}\n\nfunction getPopulates(queryParams) {\n  var populates = (0, _filter2.default)(queryParams, function (param) {\n    return -1 !== param.indexOf(\"populate\") || (0, _isObject2.default)(param) && param.populates;\n  }).map(function (p) {\n    return p.split(\"=\")[1];\n  });\n  return populates.length ? populates.map(getPopulateObj) : null;\n}\n\nfunction getPopulateChild(firebase, populate, id) {\n  return firebase.database().ref().child(\"\".concat(populate.root, \"/\").concat(id)).once(\"value\").then(function (snap) {\n    return snap.val();\n  });\n}\n\nfunction populateList(firebase, list, p, results) {\n  return results[p.root] || (0, _set2.default)(results, p.root, {}), Promise.all((0, _map2.default)(list, function (id, childKey) {\n    var populateKey = !0 === id || p.populateByKey ? childKey : id;\n    return getPopulateChild(firebase, p, populateKey).then(function (pc) {\n      return pc ? (0, _set2.default)(results, \"\".concat(p.root, \".\").concat(populateKey), pc) : results;\n    });\n  }));\n}\n\nfunction promisesForPopulate(firebase, dataKey, originalData, populatesIn) {\n  var promisesArray = [],\n      results = {},\n      populatesForData = getPopulateObjs(\"function\" == typeof populatesIn ? populatesIn(dataKey, originalData) : populatesIn),\n      dataHasPopulateChilds = (0, _some2.default)(populatesForData, function (populate) {\n    return (0, _has2.default)(originalData, populate.child);\n  });\n  return dataHasPopulateChilds ? (0, _forEach2.default)(populatesForData, function (p) {\n    return (0, _index.isString)((0, _get2.default)(originalData, p.child)) ? promisesArray.push(getPopulateChild(firebase, p, (0, _get2.default)(originalData, p.child)).then(function (v) {\n      v && (0, _set2.default)(results, \"\".concat(p.root, \".\").concat((0, _get2.default)(originalData, p.child)), v);\n    })) : promisesArray.push(populateList(firebase, (0, _get2.default)(originalData, p.child), p, results));\n  }) : (0, _forEach2.default)(originalData, function (d, key) {\n    var populatesForDataItem = getPopulateObj(\"function\" == typeof populatesIn ? populatesIn(key, d) : populatesIn);\n    (0, _forEach2.default)(populatesForDataItem, function (p) {\n      var idOrList = (0, _get2.default)(d, p.child);\n      return idOrList ? (0, _index.isString)(idOrList) ? promisesArray.push(getPopulateChild(firebase, p, idOrList).then(function (v) {\n        return v && (0, _set2.default)(results, \"\".concat(p.root, \".\").concat(idOrList), v), results;\n      })) : Array.isArray(idOrList) || (0, _isObject2.default)(idOrList) ? promisesArray.push(populateList(firebase, idOrList, p, results)) : void 0 : void 0;\n    });\n  }), Promise.all(promisesArray).then(function () {\n    return results;\n  });\n}","map":{"version":3,"sources":["../../src/utils/populate.js"],"names":["strArray","str","child","root","Array","arr","getPopulateObj","populates","param","p","firebase","populate","snap","results","Promise","populateKey","getPopulateChild","pc","promisesArray","populatesForData","getPopulateObjs","populatesIn","dataHasPopulateChilds","v","populateList","populatesForDataItem","idOrList"],"mappings":"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","sourcesContent":["import { filter, isObject, map, get, forEach, set, has, some } from 'lodash'\nimport { isString } from './index'\n\n/**\n * @private\n * Create standardized populate object from strings or objects\n * @param {string|object} str - String or Object to standardize into populate object\n * @returns {object} Populate object\n */\nexport function getPopulateObj(str) {\n  if (!isString(str)) {\n    return str\n  }\n  const strArray = str.split(':')\n  // TODO: Handle childParam\n  return { child: strArray[0], root: strArray[1] }\n}\n\n/**\n * @private\n * Determine the structure of the child parameter to populate onto\n * @param {string|object} child - Value at child parameter\n * @returns {string} Type of child\n */\nexport function getChildType(child) {\n  if (isString(child)) {\n    return 'string'\n  }\n  if (Array.isArray(child)) {\n    return 'array'\n  }\n  if (isObject(child)) {\n    return 'object'\n  }\n  return 'other'\n}\n\n/**\n * @private\n * Create standardized populate object from strings or objects\n * @param {string|object} arr - String or Object to standardize into populate object\n * @returns {Array} List of populate objects\n */\nexport function getPopulateObjs(arr) {\n  if (!Array.isArray(arr)) {\n    return arr\n  }\n  return arr.map(o => (isObject(o) ? o : getPopulateObj(o)))\n}\n\n/**\n * @private\n * Get array of populates from list of query params\n * @param {Array} queryParams - Query parameters from which to get populates\n * @returns {Array} Array of populate settings\n */\nexport function getPopulates(queryParams) {\n  const populates = filter(\n    queryParams,\n    param =>\n      param.indexOf('populate') !== -1 || (isObject(param) && param.populates)\n  ).map(p => p.split('=')[1])\n  // No populates\n  if (!populates.length) {\n    return null\n  }\n  return populates.map(getPopulateObj)\n}\n\n/**\n * @private\n * Create an array of promises for population of an object or list\n * @param {object} firebase - Internal firebase object\n * @param {object} populate - Object containing root to be populate\n * @param {object} populate.root - Firebase root path from which to load populate item\n * @param {string} id - String id\n * @returns {Promise} Resolves with populate child\n */\nexport function getPopulateChild(firebase, populate, id) {\n  return firebase\n    .database()\n    .ref()\n    .child(`${populate.root}/${id}`)\n    .once('value')\n    .then(snap =>\n      // Return id if population value does not exist\n      snap.val()\n    )\n}\n\n/**\n * @private\n * Populate list of data\n * @param {object} firebase - Internal firebase object\n * @param {object} list - Object to have parameter populated\n * @param {object} p - Object containing populate information\n * @param {object} results - Object containing results of population from other populates\n * @returns {Promise} Resovles with populated list\n */\nexport function populateList(firebase, list, p, results) {\n  // Handle root not being defined\n  if (!results[p.root]) {\n    set(results, p.root, {})\n  }\n  return Promise.all(\n    map(list, (id, childKey) => {\n      // handle list of keys\n      const populateKey = id === true || p.populateByKey ? childKey : id\n      return getPopulateChild(firebase, p, populateKey).then(pc => {\n        if (pc) {\n          // write child to result object under root name if it is found\n          return set(results, `${p.root}.${populateKey}`, pc)\n        }\n        return results\n      })\n    })\n  )\n}\n\n/**\n * @private\n * Create an array of promises for population of an object or list\n * @param {object} firebase - Internal firebase object\n * @param {string} dataKey - Object to have parameter populated\n * @param {object} originalData - Data before population\n * @param {Function|object} populatesIn - Populate configs or function returning configs\n * @returns {Promise} Promise which resolves after populate data is loaded\n */\nexport function promisesForPopulate(\n  firebase,\n  dataKey,\n  originalData,\n  populatesIn\n) {\n  // TODO: Handle selecting of parameter to populate with (i.e. displayName of users/user)\n  let promisesArray = []\n  let results = {}\n\n  // test if data is a single object, try generating populates and looking for the child\n  const populatesForData = getPopulateObjs(\n    typeof populatesIn === 'function'\n      ? populatesIn(dataKey, originalData)\n      : populatesIn\n  )\n\n  const dataHasPopulateChilds = some(populatesForData, populate =>\n    has(originalData, populate.child)\n  )\n\n  if (dataHasPopulateChilds) {\n    // Data is a single object, resolve populates directly\n    forEach(populatesForData, p => {\n      if (isString(get(originalData, p.child))) {\n        return promisesArray.push(\n          getPopulateChild(firebase, p, get(originalData, p.child)).then(v => {\n            // write child to result object under root name if it is found\n            if (v) {\n              set(results, `${p.root}.${get(originalData, p.child)}`, v)\n            }\n          })\n        )\n      }\n\n      // Single Parameter is list\n      return promisesArray.push(\n        populateList(firebase, get(originalData, p.child), p, results)\n      )\n    })\n  } else {\n    // Data is a list of objects, each value has parameters to be populated\n    // { '1': {someobject}, '2': {someobject} }\n    forEach(originalData, (d, key) => {\n      // generate populates for this data item if a fn was passed\n      const populatesForDataItem = getPopulateObj(\n        typeof populatesIn === 'function' ? populatesIn(key, d) : populatesIn\n      )\n\n      // resolve each populate for this data item\n      forEach(populatesForDataItem, p => {\n        // get value of parameter to be populated (key or list of keys)\n        const idOrList = get(d, p.child)\n\n        // Parameter/child of list item does not exist\n        if (!idOrList) {\n          return\n        }\n\n        // Parameter of each list item is single ID\n        if (isString(idOrList)) {\n          return promisesArray.push(\n            getPopulateChild(firebase, p, idOrList).then(v => {\n              // write child to result object under root name if it is found\n              if (v) {\n                set(results, `${p.root}.${idOrList}`, v)\n              }\n              return results\n            })\n          )\n        }\n\n        // Parameter of each list item is a list of ids\n        if (Array.isArray(idOrList) || isObject(idOrList)) {\n          // Create single promise that includes a promise for each child\n          return promisesArray.push(\n            populateList(firebase, idOrList, p, results)\n          )\n        }\n      })\n    })\n  }\n\n  // Return original data after population promises run\n  return Promise.all(promisesArray).then(() => results)\n}\n"]},"metadata":{},"sourceType":"script"}