{"version":3,"sources":["../../src/utils/populate.js"],"names":["getPopulateObj","str","strArray","split","child","root","getChildType","Array","isArray","getPopulateObjs","arr","map","o","getPopulates","queryParams","populates","param","indexOf","p","length","getPopulateChild","firebase","populate","id","database","ref","once","then","snap","val","populateList","list","results","Promise","all","childKey","populateKey","populateByKey","pc","promisesForPopulate","dataKey","originalData","populatesIn","promisesArray","populatesForData","dataHasPopulateChilds","push","v","d","key","populatesForDataItem","idOrList"],"mappings":"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","sourcesContent":["import { filter, isObject, map, get, forEach, set, has, some } from 'lodash'\nimport { isString } from './index'\n\n/**\n * @private\n * Create standardized populate object from strings or objects\n * @param {string|object} str - String or Object to standardize into populate object\n * @returns {object} Populate object\n */\nexport function getPopulateObj(str) {\n  if (!isString(str)) {\n    return str\n  }\n  const strArray = str.split(':')\n  // TODO: Handle childParam\n  return { child: strArray[0], root: strArray[1] }\n}\n\n/**\n * @private\n * Determine the structure of the child parameter to populate onto\n * @param {string|object} child - Value at child parameter\n * @returns {string} Type of child\n */\nexport function getChildType(child) {\n  if (isString(child)) {\n    return 'string'\n  }\n  if (Array.isArray(child)) {\n    return 'array'\n  }\n  if (isObject(child)) {\n    return 'object'\n  }\n  return 'other'\n}\n\n/**\n * @private\n * Create standardized populate object from strings or objects\n * @param {string|object} arr - String or Object to standardize into populate object\n * @returns {Array} List of populate objects\n */\nexport function getPopulateObjs(arr) {\n  if (!Array.isArray(arr)) {\n    return arr\n  }\n  return arr.map(o => (isObject(o) ? o : getPopulateObj(o)))\n}\n\n/**\n * @private\n * Get array of populates from list of query params\n * @param {Array} queryParams - Query parameters from which to get populates\n * @returns {Array} Array of populate settings\n */\nexport function getPopulates(queryParams) {\n  const populates = filter(\n    queryParams,\n    param =>\n      param.indexOf('populate') !== -1 || (isObject(param) && param.populates)\n  ).map(p => p.split('=')[1])\n  // No populates\n  if (!populates.length) {\n    return null\n  }\n  return populates.map(getPopulateObj)\n}\n\n/**\n * @private\n * Create an array of promises for population of an object or list\n * @param {object} firebase - Internal firebase object\n * @param {object} populate - Object containing root to be populate\n * @param {object} populate.root - Firebase root path from which to load populate item\n * @param {string} id - String id\n * @returns {Promise} Resolves with populate child\n */\nexport function getPopulateChild(firebase, populate, id) {\n  return firebase\n    .database()\n    .ref()\n    .child(`${populate.root}/${id}`)\n    .once('value')\n    .then(snap =>\n      // Return id if population value does not exist\n      snap.val()\n    )\n}\n\n/**\n * @private\n * Populate list of data\n * @param {object} firebase - Internal firebase object\n * @param {object} list - Object to have parameter populated\n * @param {object} p - Object containing populate information\n * @param {object} results - Object containing results of population from other populates\n * @returns {Promise} Resovles with populated list\n */\nexport function populateList(firebase, list, p, results) {\n  // Handle root not being defined\n  if (!results[p.root]) {\n    set(results, p.root, {})\n  }\n  return Promise.all(\n    map(list, (id, childKey) => {\n      // handle list of keys\n      const populateKey = id === true || p.populateByKey ? childKey : id\n      return getPopulateChild(firebase, p, populateKey).then(pc => {\n        if (pc) {\n          // write child to result object under root name if it is found\n          return set(results, `${p.root}.${populateKey}`, pc)\n        }\n        return results\n      })\n    })\n  )\n}\n\n/**\n * @private\n * Create an array of promises for population of an object or list\n * @param {object} firebase - Internal firebase object\n * @param {string} dataKey - Object to have parameter populated\n * @param {object} originalData - Data before population\n * @param {Function|object} populatesIn - Populate configs or function returning configs\n * @returns {Promise} Promise which resolves after populate data is loaded\n */\nexport function promisesForPopulate(\n  firebase,\n  dataKey,\n  originalData,\n  populatesIn\n) {\n  // TODO: Handle selecting of parameter to populate with (i.e. displayName of users/user)\n  let promisesArray = []\n  let results = {}\n\n  // test if data is a single object, try generating populates and looking for the child\n  const populatesForData = getPopulateObjs(\n    typeof populatesIn === 'function'\n      ? populatesIn(dataKey, originalData)\n      : populatesIn\n  )\n\n  const dataHasPopulateChilds = some(populatesForData, populate =>\n    has(originalData, populate.child)\n  )\n\n  if (dataHasPopulateChilds) {\n    // Data is a single object, resolve populates directly\n    forEach(populatesForData, p => {\n      if (isString(get(originalData, p.child))) {\n        return promisesArray.push(\n          getPopulateChild(firebase, p, get(originalData, p.child)).then(v => {\n            // write child to result object under root name if it is found\n            if (v) {\n              set(results, `${p.root}.${get(originalData, p.child)}`, v)\n            }\n          })\n        )\n      }\n\n      // Single Parameter is list\n      return promisesArray.push(\n        populateList(firebase, get(originalData, p.child), p, results)\n      )\n    })\n  } else {\n    // Data is a list of objects, each value has parameters to be populated\n    // { '1': {someobject}, '2': {someobject} }\n    forEach(originalData, (d, key) => {\n      // generate populates for this data item if a fn was passed\n      const populatesForDataItem = getPopulateObj(\n        typeof populatesIn === 'function' ? populatesIn(key, d) : populatesIn\n      )\n\n      // resolve each populate for this data item\n      forEach(populatesForDataItem, p => {\n        // get value of parameter to be populated (key or list of keys)\n        const idOrList = get(d, p.child)\n\n        // Parameter/child of list item does not exist\n        if (!idOrList) {\n          return\n        }\n\n        // Parameter of each list item is single ID\n        if (isString(idOrList)) {\n          return promisesArray.push(\n            getPopulateChild(firebase, p, idOrList).then(v => {\n              // write child to result object under root name if it is found\n              if (v) {\n                set(results, `${p.root}.${idOrList}`, v)\n              }\n              return results\n            })\n          )\n        }\n\n        // Parameter of each list item is a list of ids\n        if (Array.isArray(idOrList) || isObject(idOrList)) {\n          // Create single promise that includes a promise for each child\n          return promisesArray.push(\n            populateList(firebase, idOrList, p, results)\n          )\n        }\n      })\n    })\n  }\n\n  // Return original data after population promises run\n  return Promise.all(promisesArray).then(() => results)\n}\n"],"file":"populate.js"}