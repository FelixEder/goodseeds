{"version":3,"sources":["../../src/utils/auth.js"],"names":["createAuthProvider","firebase","providerName","scopes","capitalProviderName","auth","Error","provider","customAuthParameters","_","config","setCustomParameters","toLowerCase","addScope","Array","isArray","forEach","scope","String","getLoginMethodAndParams","credentials","email","password","type","token","phoneNumber","applicationVerifier","credential","credentialAuth","signInAndRetrieveDataWithCredential","method","params","indexOf","authProvider","tokenAuth","signInAndRetrieveDataWithCustomToken","signInWithEmailAndPassword","getReauthenticateMethodAndParams","reauthenticateAndRetrieveDataWithCredential","isAuthReady","store","stateName","state","getState","firebaseState","firebaseAuthState","isLoaded","authIsReady","Promise","resolve","unsubscribe","subscribe","createAuthIsReady","firebaseStateName","updateProfileOnRTDB","profileUpdate","authUid","profileRef","database","ref","userProfile","update","then","once","updateProfileOnFirestore","options","useSet","merge","firestore","doc","profileUpdatePromise","set","get","setupPresence","dispatch","ServerValue","presence","sessions","amOnline","child","onlineRef","currentUser","sessionsRef","on","snapShot","val","actionTypes","SESSION_START","payload","session","push","startedAt","TIMESTAMP","user","setPriority","onDisconnect","SESSION_END","remove"],"mappings":"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","sourcesContent":["import { capitalize } from 'lodash'\nimport { supportedAuthProviders, actionTypes } from '../constants'\n\n/**\n * @description Get correct login method and params order based on provided credentials\n * @param {object} firebase - Internal firebase object\n * @param {string} providerName - Name of Auth Provider (i.e. google, github, facebook, twitter)\n * @param {Array|string} scopes - List of scopes to add to auth provider\n * @returns {firebase.auth.AuthCredential} provider - Auth Provider\n * @private\n */\nfunction createAuthProvider(firebase, providerName, scopes) {\n  // TODO: Verify scopes are valid before adding\n  // TODO: Validate parameter inputs\n  const capitalProviderName = `${capitalize(providerName)}AuthProvider`\n\n  // Throw if auth provider does not exist on Firebase instance\n  if (!firebase.auth[capitalProviderName]) {\n    throw new Error(\n      `${providerName} is not a valid auth provider for your firebase instance. If using react-native, use a RN specific auth library.`\n    )\n  }\n\n  const provider = new firebase.auth[capitalProviderName]()\n\n  // Custom Auth Parameters\n  // TODO: Validate parameter inputs\n  const { customAuthParameters } = firebase._.config\n  if (customAuthParameters && customAuthParameters[providerName]) {\n    provider.setCustomParameters(customAuthParameters[providerName])\n  }\n\n  // Handle providers without scopes\n  if (\n    providerName.toLowerCase() === 'twitter' ||\n    typeof provider.addScope !== 'function'\n  ) {\n    return provider\n  }\n\n  // TODO: Verify scopes are valid before adding\n  provider.addScope('email')\n\n  if (scopes) {\n    if (Array.isArray(scopes)) {\n      scopes.forEach(scope => {\n        provider.addScope(scope)\n      })\n    }\n    // Add single scope if it is a string\n    if (typeof scopes === 'string' || scopes instanceof String) {\n      provider.addScope(scopes)\n    }\n  }\n\n  return provider\n}\n\n/**\n * Get correct login method and params order based on provided\n * credentials\n * @param {object} firebase - Internal firebase object\n * @param {object} credentials - Login credentials\n * @param {string} credentials.email - Email to login with (only needed for\n * email login)\n * @param {string} credentials.password - Password to login with (only needed\n * for email login)\n * @param {string} credentials.provider - Provider name such as google, twitter\n * (only needed for 3rd party provider login)\n * @param {string} credentials.type - Popup or redirect (only needed for 3rd\n * party provider login)\n * @param {string} credentials.token - Custom or provider token\n * @param {firebase.auth.AuthCredential} credentials.credential - Custom or\n * provider token\n * @param {Array|string} credentials.scopes - Scopes to add to provider\n * (i.e. email)\n * @returns {object} Method and params for calling login\n * @private\n */\nexport function getLoginMethodAndParams(firebase, credentials) {\n  const {\n    email,\n    password,\n    provider,\n    type,\n    token,\n    scopes,\n    phoneNumber,\n    applicationVerifier,\n    credential\n  } = credentials\n  // Credential Auth\n  if (credential) {\n    // Attempt to use signInAndRetrieveDataWithCredential if it exists (see #467 for more info)\n    const credentialAuth = firebase.auth().signInAndRetrieveDataWithCredential\n\n    if (credentialAuth) {\n      return {\n        method: 'signInAndRetrieveDataWithCredential',\n        params: [credential]\n      }\n    }\n    return { method: 'signInWithCredential', params: [credential] }\n  }\n\n  // Provider Auth\n  if (provider) {\n    // Verify providerName is valid\n    if (supportedAuthProviders.indexOf(provider.toLowerCase()) === -1) {\n      throw new Error(`${provider} is not a valid Auth Provider`)\n    }\n    if (token) {\n      throw new Error(\n        'provider with token no longer supported, use credential parameter instead'\n      )\n    }\n    const authProvider = createAuthProvider(firebase, provider, scopes)\n    if (type === 'popup') {\n      return { method: 'signInWithPopup', params: [authProvider] }\n    }\n    return { method: 'signInWithRedirect', params: [authProvider] }\n  }\n\n  // Token Auth\n  if (token) {\n    // Check for new sign in method (see #484 for more info)\n    const tokenAuth = firebase.auth().signInAndRetrieveDataWithCustomToken\n\n    if (tokenAuth) {\n      return { method: 'signInAndRetrieveDataWithCustomToken', params: [token] }\n    }\n\n    return { method: 'signInWithCustomToken', params: [token] }\n  }\n\n  // Phone Number Auth\n  if (phoneNumber) {\n    if (!applicationVerifier) {\n      throw new Error(\n        'Application verifier is required for phone authentication'\n      )\n    }\n    return {\n      method: 'signInWithPhoneNumber',\n      params: [phoneNumber, applicationVerifier]\n    }\n  }\n\n  // Check for new sign in method (see #484 for more info)\n  // Note: usage of signInAndRetrieveDataWithEmailAndPassword is now a fallback since it is deprecated (see #484 for more info)\n  if (!firebase.auth().signInWithEmailAndPassword) {\n    return {\n      method: 'signInAndRetrieveDataWithEmailAndPassword',\n      params: [email, password]\n    }\n  }\n\n  // Email/Password Auth\n  return { method: 'signInWithEmailAndPassword', params: [email, password] }\n}\n\n/**\n * Get correct reauthenticate method and params order based on provided\n * credentials\n * @param {object} firebase - Internal firebase object\n * @param {object} credentials - Login credentials\n * @param {string} credentials.provider - Provider name such as google, twitter\n * (only needed for 3rd party provider login)\n * @param {string} credentials.type - Popup or redirect (only needed for 3rd\n * party provider login)\n * @param {firebase.auth.AuthCredential} credentials.credential - Custom or\n * provider token\n * @param {Array|string} credentials.scopes - Scopes to add to provider\n * (i.e. email)\n * @returns {object} Method and params for calling login\n * @private\n */\nexport function getReauthenticateMethodAndParams(firebase, credentials) {\n  const {\n    provider,\n    type,\n    scopes,\n    phoneNumber,\n    applicationVerifier,\n    credential\n  } = credentials\n  // Credential Auth\n  if (credential) {\n    // Attempt to use signInAndRetrieveDataWithCredential if it exists (see #467 for more info)\n    const credentialAuth = firebase.auth()\n      .reauthenticateAndRetrieveDataWithCredential\n\n    if (credentialAuth) {\n      return {\n        method: 'reauthenticateAndRetrieveDataWithCredential',\n        params: [credential]\n      }\n    }\n    return { method: 'reauthenticateWithCredential', params: [credential] }\n  }\n\n  // Provider Auth\n  if (provider) {\n    // Verify providerName is valid\n    if (supportedAuthProviders.indexOf(provider.toLowerCase()) === -1) {\n      throw new Error(`${provider} is not a valid Auth Provider`)\n    }\n    const authProvider = createAuthProvider(firebase, provider, scopes)\n    if (type === 'popup') {\n      return { method: 'reauthenticateWithPopup', params: [authProvider] }\n    }\n    return { method: 'reauthenticateWithRedirect', params: [authProvider] }\n  }\n\n  // Phone Number Auth\n  if (!applicationVerifier) {\n    throw new Error('Application verifier is required for phone authentication')\n  }\n  return {\n    method: 'reauthenticateWithPhoneNumber',\n    params: [phoneNumber, applicationVerifier]\n  }\n}\n\n/**\n * Returns a promise that completes when Firebase Auth is ready in the given\n * store using react-redux-firebase.\n * @param {object} store - The Redux store on which we want to detect if\n * Firebase auth is ready.\n * @param {string} [stateName='firebase'] - The attribute name of the\n * react-redux-firebase reducer when using multiple combined reducers.\n * 'firebase' by default. Set this to `null` to indicate that the\n * react-redux-firebase reducer is not in a combined reducer.\n * @returns {Promise} Resolves when Firebase auth is ready in the store.\n */\nfunction isAuthReady(store, stateName) {\n  const state = store.getState()\n  const firebaseState = stateName ? state[stateName] : state\n  const firebaseAuthState = firebaseState && firebaseState.auth\n  if (!firebaseAuthState) {\n    throw new Error(\n      `The Firebase auth state could not be found in the store under the attribute '${\n        stateName ? `${stateName}.` : ''\n      }auth'. Make sure your react-redux-firebase reducer is correctly set in the store`\n    )\n  }\n  return firebaseState.auth.isLoaded\n}\n\n/**\n * Returns a promise that completes when Firebase Auth is ready in the given\n * store using react-redux-firebase.\n * @param {object} store - The Redux store on which we want to detect if\n * Firebase auth is ready.\n * @param {string} [stateName='firebase'] - The attribute name of the react-redux-firebase\n * reducer when using multiple combined reducers. 'firebase' by default. Set\n * this to `null` to indicate that the react-redux-firebase reducer is not in a\n * combined reducer.\n * @returns {Promise} Resolve when Firebase auth is ready in the store.\n */\nexport function authIsReady(store, stateName = 'firebase') {\n  return new Promise(resolve => {\n    if (isAuthReady(store, stateName)) {\n      resolve()\n    } else {\n      const unsubscribe = store.subscribe(() => {\n        if (isAuthReady(store, stateName)) {\n          unsubscribe()\n          resolve()\n        }\n      })\n    }\n  })\n}\n\n/**\n * Function that creates and authIsReady promise\n * @param {object} store - The Redux store on which we want to detect if\n * Firebase auth is ready.\n * @param {object} config - Config options for authIsReady\n * @param {string} config.authIsReady - Config options for authIsReady\n * @param {string} config.firebaseStateName - Config options for authIsReady\n * @returns {Promise} Resolves when Firebase auth is ready in the store.\n */\nexport function createAuthIsReady(store, config) {\n  return typeof config.authIsReady === 'function'\n    ? config.authIsReady(store, config)\n    : authIsReady(store, config.firebaseStateName)\n}\n\n/**\n * Update profile data on Firebase Real Time Database\n * @param {object} firebase - internal firebase object\n * @param {object} profileUpdate - Updates to profile object\n * @returns {Promise} Resolves with results of profile get\n */\nexport function updateProfileOnRTDB(firebase, profileUpdate) {\n  const { _: { config, authUid } } = firebase\n  const profileRef = firebase.database().ref(`${config.userProfile}/${authUid}`)\n  return profileRef.update(profileUpdate).then(() => profileRef.once('value'))\n}\n\n/**\n * Update profile data on Firestore by calling set (with merge: true) on\n * the profile.\n * @param {object} firebase - internal firebase object\n * @param {object} profileUpdate - Updates to profile object\n * @param {object} options - Options object for configuring how profile\n * update occurs\n * @param {boolean} [options.useSet=true] - Use set with merge instead of\n * update. Setting to `false` uses update (can cause issue of profile document\n * does not exist).\n * @param {boolean} [options.merge=true] - Whether or not to use merge when\n * setting profile\n * @returns {Promise} Resolves with results of profile get\n */\nexport function updateProfileOnFirestore(\n  firebase,\n  profileUpdate,\n  options = {}\n) {\n  const { useSet = true, merge = true } = options\n  const { firestore, _: { config, authUid } } = firebase\n  const profileRef = firestore().doc(`${config.userProfile}/${authUid}`)\n  // Use set with merge (to prevent \"No document to update\") unless otherwise\n  // specificed through options\n  const profileUpdatePromise = useSet\n    ? profileRef.set(profileUpdate, { merge })\n    : profileRef.update(profileUpdate)\n  return profileUpdatePromise.then(() => profileRef.get())\n}\n\n/**\n * Start presence management for a specificed user uid.\n * Presence collection contains a list of users that are online currently.\n * Sessions collection contains a record of all user sessions.\n * This function is called within login functions if enablePresence: true.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @private\n */\nexport function setupPresence(dispatch, firebase) {\n  // exit if database does not exist on firebase instance\n  if (!firebase.database || !firebase.database.ServerValue) {\n    return\n  }\n  const ref = firebase.database().ref()\n  const { config: { presence, sessions }, authUid } = firebase._\n  const amOnline = ref.child('.info/connected')\n  const onlineRef = ref\n    .child(\n      typeof presence === 'function'\n        ? presence(firebase.auth().currentUser, firebase)\n        : presence\n    )\n    .child(authUid)\n  let sessionsRef =\n    typeof sessions === 'function'\n      ? sessions(firebase.auth().currentUser, firebase)\n      : sessions\n  if (sessionsRef) {\n    sessionsRef = ref.child(sessions)\n  }\n  amOnline.on('value', snapShot => {\n    if (!snapShot.val()) return\n    // user is online\n    if (sessionsRef) {\n      // add session and set disconnect\n      dispatch({ type: actionTypes.SESSION_START, payload: authUid })\n      // add new session to sessions collection\n      const session = sessionsRef.push({\n        startedAt: firebase.database.ServerValue.TIMESTAMP,\n        user: authUid\n      })\n      // Support versions of react-native-firebase that do not have setPriority\n      // on firebase.database.ThenableReference\n      if (typeof session.setPriority === 'function') {\n        // set authUid as priority for easy sorting\n        session.setPriority(authUid)\n      }\n      session\n        .child('endedAt')\n        .onDisconnect()\n        .set(firebase.database.ServerValue.TIMESTAMP, () => {\n          dispatch({ type: actionTypes.SESSION_END })\n        })\n    }\n    // add correct session id to user\n    // remove from presence list\n    onlineRef.set(true)\n    onlineRef.onDisconnect().remove()\n  })\n}\n"],"file":"auth.js"}