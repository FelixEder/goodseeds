{"version":3,"sources":["../../src/actions/auth.js"],"names":["dispatchLoginError","dispatch","authError","params","type","actionTypes","LOGIN_ERROR","unWatchUserProfile","firebase","_","authUid","config","userProfile","useFirestoreForProfile","profileWatch","firestore","database","ref","child","off","getProfileFromSnap","snap","val","data","exists","handleProfileWatchResponse","userProfileSnap","token","profileParamsToPopulate","autoPopulateProfile","logErrors","profile","Array","isArray","key","then","result","path","SET","timestamp","Date","now","requesting","requested","SET_PROFILE","populates","catch","err","console","error","UNAUTHORIZED_ERROR","message","warn","createProfileWatchErrorHandler","onProfileListenerError","factoryResult","Promise","reject","watchUserProfile","enableClaims","collection","doc","onSnapshot","auth","currentUser","getIdTokenResult","on","Error","createUserProfile","userData","resolve","profileFactory","uid","user","get","profileSnap","updateProfileOnLogin","newProfile","userDataObject","toJSON","keysToRemoveFromAuth","avatarUrl","photoURL","providerData","map","providerDataItem","keysToPreserveFromProviderData","set","merge","once","update","onProfileWriteError","handleAuthStateChange","authData","presence","LOGIN","preserve","preserveOnLogin","onAuthStateChanged","AUTH_EMPTY_CHANGE","preserveOnEmptyAuthChange","handleRedirectResult","onRedirectResult","email","displayName","init","AUTHENTICATION_INIT_STARTED","enableRedirectHandling","getRedirectResult","window","location","protocol","indexOf","AUTHENTICATION_INIT_FINISHED","login","credentials","resetBeforeLogin","method","includes","confirm","code","additionalUserInfo","phoneNumber","reauthenticate","logout","signOut","action","LOGOUT","preserveOnLogout","createUser","password","createUserWithEmailAndPassword","resetPassword","sendPasswordResetEmail","confirmPasswordReset","verifyPasswordResetCode","updateProfile","profileUpdate","options","PROFILE_UPDATE_START","payload","updatePromise","updateProfileOnFirestore","updateProfileOnRTDB","PROFILE_UPDATE_SUCCESS","PROFILE_UPDATE_ERROR","updateAuth","authUpdate","updateInProfile","AUTH_UPDATE_START","AUTH_UPDATE_ERROR","AUTH_UPDATE_SUCCESS","updateEmail","newEmail","EMAIL_UPDATE_START","EMAIL_UPDATE_ERROR","EMAIL_UPDATE_SUCCESS","reloadAuth","AUTH_RELOAD_START","AUTH_RELOAD_ERROR","reload","AUTH_RELOAD_SUCCESS","linkWithCredential","credential","AUTH_LINK_START","AUTH_LINK_ERROR","AUTH_LINK_SUCCESS","linkWithAuthDispatch","promiseFunc","args","linkAndRetrieveDataWithCredential","linkWithPopup","linkWithRedirect","provider","signInWithPhoneNumber","applicationVerifier"],"mappings":"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","sourcesContent":["import { forEach, omit, pick } from 'lodash'\nimport { actionTypes } from '../constants'\nimport { populate } from '../helpers'\nimport { isString } from '../utils'\nimport {\n  getLoginMethodAndParams,\n  getReauthenticateMethodAndParams,\n  updateProfileOnRTDB,\n  updateProfileOnFirestore,\n  setupPresence\n} from '../utils/auth'\nimport { promisesForPopulate, getPopulateObjs } from '../utils/populate'\n\n/**\n * Dispatch login error action\n * @param {Function} dispatch - Action dispatch function\n * @param {object} authError - Error object\n * @param {object} params - Supplement action params\n * @returns {any} Return of action dispatch\n * @private\n */\nfunction dispatchLoginError(dispatch, authError, params = {}) {\n  return dispatch({\n    type: actionTypes.LOGIN_ERROR,\n    ...params,\n    authError\n  })\n}\n\n/**\n * Remove listener from user profile\n * @param {object} firebase - Internal firebase object\n * @private\n */\nexport function unWatchUserProfile(firebase) {\n  const {\n    authUid,\n    config: { userProfile, useFirestoreForProfile }\n  } = firebase._\n  if (firebase._.profileWatch) {\n    if (useFirestoreForProfile && firebase.firestore) {\n      // Call profile onSnapshot unsubscribe stored on profileWatch\n      firebase._.profileWatch()\n    } else {\n      firebase\n        .database()\n        .ref()\n        .child(`${userProfile}/${authUid}`)\n        .off('value', firebase._.profileWatch)\n    }\n    firebase._.profileWatch = null\n  }\n}\n\n/**\n * @param {firebase.database.Snapshot|firebase.firestore.DocumentSnapshot} snap - Profile snapshot\n * @returns {object|null} Profile from snapshot\n */\nfunction getProfileFromSnap(snap) {\n  // Real Time Database\n  if (snap && snap.val) {\n    return snap.val()\n  }\n  // Firestore\n  if (snap && snap.data && snap.exists) {\n    return snap.data()\n  }\n  return null\n}\n\n/**\n * Handle response from profile listener. Works with both Real Time Database\n * and Cloud Firestore.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {firebase.database.Snapshot|firebase.firestore.DocumentSnapshot} userProfileSnap - Snapshot from profile watcher\n * @param {string} token - Token to pass along in action dispatch\n * @private\n */\nexport function handleProfileWatchResponse(\n  dispatch,\n  firebase,\n  userProfileSnap,\n  token\n) {\n  const {\n    profileParamsToPopulate,\n    autoPopulateProfile,\n    useFirestoreForProfile,\n    logErrors\n  } = firebase._.config\n  const profile = getProfileFromSnap(userProfileSnap)\n  if (\n    !profileParamsToPopulate ||\n    useFirestoreForProfile || // populating profile through firestore not yet supported\n    (!Array.isArray(profileParamsToPopulate) &&\n      !isString(profileParamsToPopulate))\n  ) {\n    if (useFirestoreForProfile && profileParamsToPopulate) {\n      console.warn('Profile population is not yet supported for Firestore') // eslint-disable-line no-console\n    }\n    dispatch({\n      type: actionTypes.SET_PROFILE,\n      profile: token ? { ...profile, token } : profile\n    })\n  } else {\n    // Convert array of populate config into an array of once query promises\n    promisesForPopulate(\n      firebase,\n      userProfileSnap.key,\n      profile,\n      profileParamsToPopulate\n    )\n      .then(data => {\n        // Fire actions for placement of data gathered in populate into redux\n        forEach(data, (result, path) => {\n          dispatch({\n            type: actionTypes.SET,\n            path,\n            data: result,\n            timestamp: Date.now(),\n            requesting: false,\n            requested: true\n          })\n        })\n        if (!autoPopulateProfile) {\n          // Dispatch action with profile combined with populated parameters\n          dispatch({\n            type: actionTypes.SET_PROFILE,\n            profile: token ? { ...profile, token } : profile\n          })\n        } else {\n          // Auto Populate profile\n          const populates = getPopulateObjs(profileParamsToPopulate)\n          const profile = userProfileSnap.val()\n          dispatch({\n            type: actionTypes.SET_PROFILE,\n            profile: populate(\n              { profile: token ? { ...profile, token } : profile, data },\n              'profile',\n              populates\n            )\n          })\n        }\n      })\n      .catch(err => {\n        if (logErrors) {\n          // eslint-disable-next-line no-console\n          console.error(\n            `RRF: Error retrieving data for profile population. Firebase:`,\n            err\n          )\n        }\n        // Error retrieving data for population onto profile.\n        dispatch({\n          type: actionTypes.UNAUTHORIZED_ERROR,\n          authError: `Error during profile population: ${err.message}`\n        })\n        // Update profile with un-populated version\n        dispatch({ type: actionTypes.SET_PROFILE, profile })\n      })\n  }\n}\n\n/**\n * Creates a function for handling errors from profile watcher. Used for\n * both RTDB and Firestore.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @returns {Function} Profile watch error handler function\n * @private\n */\nfunction createProfileWatchErrorHandler(dispatch, firebase) {\n  const { config: { onProfileListenerError, logErrors } } = firebase._\n  return function handleProfileError(err) {\n    if (logErrors) {\n      // eslint-disable-next-line no-console\n      console.error(`Error with profile listener: ${err.message || ''}`, err)\n    }\n    if (typeof onProfileListenerError === 'function') {\n      const factoryResult = onProfileListenerError(err, firebase)\n      // Return factoryResult if it is a promise\n      if (typeof factoryResult.then === 'function') {\n        return factoryResult\n      }\n    }\n    return Promise.reject(err)\n  }\n}\n\n/**\n * Watch user profile. Internally dispatches sets firebase._.profileWatch\n * and calls SET_PROFILE actions. Supports both Realtime Database and Firestore\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @private\n */\nexport const watchUserProfile = (dispatch, firebase) => {\n  const {\n    authUid,\n    config: { userProfile, useFirestoreForProfile, enableClaims }\n  } = firebase._\n  unWatchUserProfile(firebase)\n\n  if (userProfile) {\n    if (useFirestoreForProfile && firebase.firestore) {\n      firebase._.profileWatch = firebase // eslint-disable-line no-param-reassign\n        .firestore()\n        .collection(userProfile)\n        .doc(authUid)\n        .onSnapshot(userProfileSnap => {\n          return enableClaims\n            ? firebase\n                .auth()\n                .currentUser.getIdTokenResult(true)\n                .then(token =>\n                  handleProfileWatchResponse(\n                    dispatch,\n                    firebase,\n                    userProfileSnap,\n                    token\n                  )\n                )\n            : handleProfileWatchResponse(\n                dispatch,\n                firebase,\n                userProfileSnap,\n                null\n              )\n        }, createProfileWatchErrorHandler(dispatch, firebase))\n    } else if (firebase.database) {\n      firebase._.profileWatch = firebase // eslint-disable-line no-param-reassign\n        .database()\n        .ref()\n        .child(`${userProfile}/${authUid}`)\n        .on(\n          'value',\n          userProfileSnap => {\n            enableClaims\n              ? firebase\n                  .auth()\n                  .currentUser.getIdTokenResult(true)\n                  .then(token =>\n                    handleProfileWatchResponse(\n                      dispatch,\n                      firebase,\n                      userProfileSnap,\n                      token\n                    )\n                  )\n              : handleProfileWatchResponse(\n                  dispatch,\n                  firebase,\n                  userProfileSnap,\n                  null\n                )\n          },\n          createProfileWatchErrorHandler(dispatch, firebase)\n        )\n    } else {\n      throw new Error(\n        'Real Time Database or Firestore must be included to enable user profile'\n      )\n    }\n  }\n}\n\n/**\n * Create user profile if it does not already exist.\n * `updateProfileOnLogin: false` can be passed to config to disable updating.\n * Profile factory is applied if it exists and is a function.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {object} userData - User data object (response from authenticating)\n * @param {object} profile - Profile data to place in new profile\n * @returns {Promise} Resolves after creating user profile\n * @private\n */\nexport const createUserProfile = (dispatch, firebase, userData, profile) => {\n  const { _: { config } } = firebase\n  if (!config.userProfile || (!firebase.database && !firebase.firestore)) {\n    return Promise.resolve(userData)\n  }\n  // use profileFactory if it exists in config\n  if (typeof config.profileFactory === 'function') {\n    // catch errors in user provided profileFactory function\n    try {\n      profile = config.profileFactory(userData, profile, firebase) // eslint-disable-line no-param-reassign\n    } catch (err) {\n      /* eslint-disable no-console */\n      console.error(\n        'Error occurred within profileFactory function:',\n        err.message || err\n      )\n      /* eslint-enable no-console */\n      return Promise.reject(err)\n    }\n  }\n\n  // Check/Write profile using Firestore\n  if (config.useFirestoreForProfile) {\n    // Check for user's profile at userProfile path if provided\n    return firebase\n      .firestore()\n      .collection(config.userProfile)\n      .doc(userData.uid || userData.user.uid)\n      .get()\n      .then(profileSnap => {\n        // Return if config for updating profile is not enabled and profile exists\n        if (!config.updateProfileOnLogin && profileSnap.exists) {\n          return profileSnap.data()\n        }\n        let newProfile = profile\n\n        // If the user did supply a profileFactory, we should use the result of it for the new Profile\n        if (!newProfile) {\n          // Convert to JSON format (to prevent issue of writing invalid type to Firestore)\n          const userDataObject = userData.uid\n            ? userData.toJSON ? userData.toJSON() : userData\n            : userData.user.toJSON ? userData.user.toJSON() : userData.user\n          // Remove unnecessary auth params (configurable) and preserve types of timestamps\n          newProfile = {\n            ...omit(userDataObject, config.keysToRemoveFromAuth),\n            avatarUrl: userDataObject.photoURL // match profile pattern used for RTDB\n          }\n        }\n\n        // Convert custom object type within Provider data to a normal object\n        if (Array.isArray(newProfile.providerData)) {\n          newProfile.providerData = newProfile.providerData.map(\n            providerDataItem =>\n              pick(providerDataItem, config.keysToPreserveFromProviderData)\n          )\n        }\n\n        // Create/Update the profile\n        return profileSnap.ref\n          .set(newProfile, { merge: true })\n          .then(() => newProfile)\n      })\n      .catch(err => {\n        // Error reading user profile\n        dispatch({ type: actionTypes.UNAUTHORIZED_ERROR, authError: err })\n        return Promise.reject(err)\n      })\n  }\n\n  // Check/Write profile using Firebase RTDB\n  return firebase\n    .database()\n    .ref()\n    .child(\n      `${config.userProfile}/${\n        userData.user ? userData.user.uid : userData.uid\n      }`\n    )\n    .once('value')\n    .then(\n      profileSnap =>\n        // update profile only if doesn't exist or if set by config\n        !config.updateProfileOnLogin && profileSnap.val() !== null\n          ? profileSnap.val()\n          : profileSnap.ref.update(profile).then(() => profile) // Update the profile\n    )\n    .catch(err => {\n      // Error reading user profile\n      dispatch({ type: actionTypes.UNAUTHORIZED_ERROR, authError: err })\n      if (typeof config.onProfileWriteError === 'function') {\n        config.onProfileWriteError(err, firebase)\n      }\n      return Promise.reject(err)\n    })\n}\n\n/**\n * Auth state change handler. Handles response from firebase's onAuthStateChanged\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param  {object} authData - Auth data from firebase's onAuthStateChanged\n * @private\n */\nconst handleAuthStateChange = (dispatch, firebase, authData) => {\n  const { config } = firebase._\n  if (!authData) {\n    // Run onAuthStateChanged if it exists in config and enableEmptyAuthChanges is set to true\n    if (typeof config.onAuthStateChanged === 'function') {\n      firebase._.config.onAuthStateChanged(authData, firebase, dispatch)\n    }\n    dispatch({\n      type: actionTypes.AUTH_EMPTY_CHANGE,\n      preserve: config.preserveOnEmptyAuthChange\n    })\n\n    unWatchUserProfile(firebase)\n  } else {\n    firebase._.authUid = authData.uid // eslint-disable-line no-param-reassign\n\n    // setup presence if settings and database exist\n    if (config.presence) {\n      setupPresence(dispatch, firebase)\n    }\n\n    dispatch({\n      type: actionTypes.LOGIN,\n      auth: authData,\n      preserve: config.preserveOnLogin\n    })\n\n    watchUserProfile(dispatch, firebase)\n\n    // Run onAuthStateChanged if it exists in config\n    if (typeof config.onAuthStateChanged === 'function') {\n      config.onAuthStateChanged(authData, firebase, dispatch)\n    }\n  }\n}\n\n/**\n * Redirect result handler\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param  {object} authData - Auth data from Firebase's getRedirectResult\n * @returns {void}\n * @private\n */\nexport const handleRedirectResult = (dispatch, firebase, authData) => {\n  // Run onRedirectResult if it exists in config\n  if (typeof firebase._.config.onRedirectResult === 'function') {\n    firebase._.config.onRedirectResult(authData, firebase, dispatch)\n  }\n  if (authData && authData.user) {\n    const { user } = authData\n\n    firebase._.authUid = user.uid // eslint-disable-line no-param-reassign\n    watchUserProfile(dispatch, firebase)\n\n    dispatch({\n      type: actionTypes.LOGIN,\n      auth: user,\n      preserve: firebase._.config.preserveOnLogin\n    })\n\n    return createUserProfile(dispatch, firebase, user, {\n      email: user.email,\n      displayName: user.providerData[0].displayName || user.email,\n      avatarUrl: user.providerData[0].photoURL,\n      providerData: user.providerData\n    })\n  }\n}\n\n/**\n * Initialize authentication state change listener that\n * watches user profile and dispatches login action\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @private\n */\nexport const init = (dispatch, firebase) => {\n  // exit if auth does not exist\n  if (!firebase.auth) {\n    return\n  }\n  dispatch({ type: actionTypes.AUTHENTICATION_INIT_STARTED })\n  // Set Auth State listener\n  firebase\n    .auth()\n    .onAuthStateChanged(authData =>\n      handleAuthStateChange(dispatch, firebase, authData)\n    )\n\n  // set redirect result callback if enableRedirectHandling set to true\n  if (\n    firebase._.config.enableRedirectHandling &&\n    typeof firebase.auth().getRedirectResult === 'function' &&\n    (typeof window !== 'undefined' &&\n      window.location &&\n      window.location.protocol &&\n      window.location.protocol.indexOf('http') !== -1)\n  ) {\n    firebase\n      .auth()\n      .getRedirectResult()\n      .then(authData => handleRedirectResult(dispatch, firebase, authData))\n      .catch(error => {\n        dispatchLoginError(dispatch, error)\n        return Promise.reject(error)\n      })\n  }\n\n  firebase.auth().currentUser // eslint-disable-line no-unused-expressions\n\n  dispatch({ type: actionTypes.AUTHENTICATION_INIT_FINISHED })\n}\n\n/**\n * Login with errors dispatched\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {object} credentials - Login credentials\n * @param {object} credentials.email - Email to login with (only needed for email login)\n * @param {object} credentials.password - Password to login with (only needed for email login)\n * @param {object} credentials.provider - Provider name such as google, twitter (only needed for 3rd party provider login)\n * @param {object} credentials.type - Popup or redirect (only needed for 3rd party provider login)\n * @param {object} credentials.token - Custom or provider token\n * @param {firebase.auth.AuthCredential} credentials.credential - Custom or provider token\n * @param {Array|string} credentials.scopes - Scopes to add to provider (i.e. email)\n * @returns {Promise} Resolves after user is logged in\n * @private\n */\nexport const login = (dispatch, firebase, credentials) => {\n  if (firebase._.config.resetBeforeLogin) {\n    dispatchLoginError(dispatch, null)\n  }\n\n  const { method, params } = getLoginMethodAndParams(firebase, credentials)\n\n  return firebase\n    .auth()\n    [method](...params)\n    .then(userData => {\n      // Handle null response from getRedirectResult before redirect has happened\n      if (!userData) return Promise.resolve(null)\n\n      // For email auth return uid (createUser is used for creating a profile)\n      if (\n        [\n          'signInWithEmailAndPassword',\n          'signInAndRetrieveDataWithEmailAndPassword'\n        ].includes(method)\n      ) {\n        return { user: userData }\n      }\n      // TODO: Only call createUserProfile once, and just pass different settings\n\n      // For token auth, the user key doesn't exist. Instead, return the JWT.\n      if (\n        [\n          'signInWithCustomToken',\n          'signInAndRetrieveDataWithCustomToken'\n        ].includes(method)\n      ) {\n        if (!firebase._.config.updateProfileOnLogin) {\n          return { user: userData }\n        }\n        return createUserProfile(\n          dispatch,\n          firebase,\n          userData,\n          credentials.profile\n        )\n      }\n\n      if (method === 'signInWithPhoneNumber') {\n        // Modify confirm method to include profile creation\n        return {\n          ...userData,\n          confirm: code =>\n            // Call original confirm\n            userData.confirm(code).then(({ user, additionalUserInfo }) =>\n              createUserProfile(dispatch, firebase, user, {\n                phoneNumber: user.providerData[0].phoneNumber,\n                providerData: user.providerData\n              }).then(profile => ({ profile, user, additionalUserInfo }))\n            )\n        }\n      }\n\n      // Create profile when logging in with external provider\n      const user = userData.user || userData\n\n      return createUserProfile(\n        dispatch,\n        firebase,\n        user,\n        credentials.profile || {\n          email: user.email,\n          displayName: user.providerData[0].displayName || user.email,\n          avatarUrl: user.providerData[0].photoURL,\n          providerData: user.providerData\n        }\n      ).then(profile => ({ profile, ...userData }))\n    })\n    .catch(err => {\n      dispatchLoginError(dispatch, err)\n      return Promise.reject(err)\n    })\n}\n\n/**\n * Reauthenticate with errors dispatched\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {object} credentials - Login credentials\n * @param {object} credentials.provider - Provider name such as google, twitter (only needed for 3rd party provider login)\n * @param {object} credentials.type - Popup or redirect (only needed for 3rd party provider login)\n * @param {firebase.auth.AuthCredential} credentials.credential - Custom or provider token\n * @param {Array|string} credentials.scopes - Scopes to add to provider (i.e. email)\n * @returns {Promise} Resolves after user is logged in\n * @private\n */\nexport const reauthenticate = (dispatch, firebase, credentials) => {\n  const { method, params } = getReauthenticateMethodAndParams(\n    firebase,\n    credentials\n  )\n\n  return firebase\n    .auth()\n    .currentUser[method](...params)\n    .then(userData => {\n      // Handle null response from getRedirectResult before redirect has happened\n      if (!userData) return Promise.resolve(null)\n\n      if (method === 'reauthenticateWithPhoneNumber') {\n        // Modify confirm method to include profile creation\n        return {\n          ...userData,\n          confirm: code =>\n            // Call original confirm\n            userData.confirm(code).then(({ user, additionalUserInfo }) =>\n              createUserProfile(dispatch, firebase, user, {\n                phoneNumber: user.providerData[0].phoneNumber,\n                providerData: user.providerData\n              }).then(profile => ({ profile, user, additionalUserInfo }))\n            )\n        }\n      }\n\n      // Create profile when logging in with external provider\n      const user = userData.user || userData\n\n      return createUserProfile(\n        dispatch,\n        firebase,\n        user,\n        credentials.profile || {\n          email: user.email,\n          displayName: user.providerData[0].displayName || user.email,\n          avatarUrl: user.providerData[0].photoURL,\n          providerData: user.providerData\n        }\n      ).then(profile => ({ profile, ...userData }))\n    })\n    .catch(err => {\n      dispatchLoginError(dispatch, err, { reauthenticate: true })\n      return Promise.reject(err)\n    })\n}\n\n/**\n * Logout of firebase and dispatch logout event\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @returns {Promise} Resolves after logging out\n * @private\n */\nexport const logout = (dispatch, firebase) => {\n  // detach profile listener before logging out to prevent permission_denied\n  // errors (for more info see #494)\n  unWatchUserProfile(firebase)\n  return firebase\n    .auth()\n    .signOut()\n    .then(() => {\n      const action = {\n        type: actionTypes.LOGOUT\n      }\n      if (firebase._.config.preserveOnLogout) {\n        action.preserve = firebase._.config.preserveOnLogout\n      }\n      dispatch(action)\n      firebase._.authUid = null\n      return firebase\n    })\n}\n\n/**\n * Create a new user in auth and add an account to userProfile root\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {object} credentials - Login credentials\n * @param {string} credentials.email - Email of user\n * @param {string} credentials.password - Password of new user\n * @param {object} profile - Profile to store in database for new user\n * @returns {Promise} Resolves after user is created\n * @private\n */\nexport const createUser = (\n  dispatch,\n  firebase,\n  { email, password },\n  profile\n) => {\n  dispatchLoginError(dispatch, null)\n\n  if (!email || !password) {\n    const error = new Error('Email and Password are required to create user')\n    dispatchLoginError(dispatch, error)\n    return Promise.reject(error)\n  }\n\n  return firebase\n    .auth()\n    .createUserWithEmailAndPassword(email, password)\n    .then(userData =>\n      // Login to newly created account flag is not set to false\n      createUserProfile(dispatch, firebase, userData, profile || { email })\n    )\n    .catch(err => {\n      dispatchLoginError(dispatch, err)\n      return Promise.reject(err)\n    })\n}\n\n/**\n * Send password reset email to provided email\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {string} email - Email to send recovery email to\n * @returns {Promise} Resolves after password reset email is sent\n * @private\n */\nexport const resetPassword = (dispatch, firebase, email) => {\n  dispatchLoginError(dispatch, null)\n  return firebase\n    .auth()\n    .sendPasswordResetEmail(email)\n    .catch(err => {\n      if (err) {\n        switch (err.code) {\n          case 'auth/user-not-found':\n            dispatchLoginError(\n              dispatch,\n              new Error('The specified user account does not exist.')\n            )\n            break\n          default:\n            dispatchLoginError(dispatch, err)\n        }\n        return Promise.reject(err)\n      }\n    })\n}\n\n/**\n * Confirm the password reset with code and password\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {string} code - Email confirmation reset code\n * @param {string} password - Password to set it to\n * @returns {Promise} Resvoles after password reset is confirmed\n * @private\n */\nexport const confirmPasswordReset = (dispatch, firebase, code, password) => {\n  dispatchLoginError(dispatch, null)\n  return firebase\n    .auth()\n    .confirmPasswordReset(code, password)\n    .catch(err => {\n      if (err) {\n        switch (err.code) {\n          case 'auth/expired-action-code':\n            dispatchLoginError(\n              dispatch,\n              new Error('The action code has expired.')\n            )\n            break\n          case 'auth/invalid-action-code':\n            dispatchLoginError(\n              dispatch,\n              new Error('The action code is invalid.')\n            )\n            break\n          case 'auth/user-disabled':\n            dispatchLoginError(dispatch, new Error('The user is disabled.'))\n            break\n          case 'auth/user-not-found':\n            dispatchLoginError(dispatch, new Error('The user is not found.'))\n            break\n          case 'auth/weak-password':\n            dispatchLoginError(\n              dispatch,\n              new Error('The password is not strong enough.')\n            )\n            break\n          default:\n            dispatchLoginError(dispatch, err)\n        }\n        return Promise.reject(err)\n      }\n    })\n}\n\n/**\n * Verify that password reset code is valid\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {string} code - Password reset code\n * @returns {Promise} email - Email associated with reset code\n * @private\n */\nexport const verifyPasswordResetCode = (dispatch, firebase, code) => {\n  dispatchLoginError(dispatch, null)\n  return firebase\n    .auth()\n    .verifyPasswordResetCode(code)\n    .catch(err => {\n      if (err) {\n        dispatchLoginError(dispatch, err)\n      }\n      return Promise.reject(err)\n    })\n}\n\n/**\n * Update user profile\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {object} profileUpdate - Update for profile\n * @param {object} options - Options object\n * @returns {Promise} Resolves after updating profile\n * @private\n */\nexport const updateProfile = (dispatch, firebase, profileUpdate, options) => {\n  const { _: { config } } = firebase\n  dispatch({\n    type: actionTypes.PROFILE_UPDATE_START,\n    payload: profileUpdate\n  })\n  // Select update promise type (firebase/firestore) based on config\n  const updatePromise = config.useFirestoreForProfile\n    ? updateProfileOnFirestore\n    : updateProfileOnRTDB\n  return updatePromise(firebase, profileUpdate, options)\n    .then(snap => {\n      dispatch({\n        type: actionTypes.PROFILE_UPDATE_SUCCESS,\n        payload: config.useFirestoreForProfile ? snap.data() : snap.val()\n      })\n      return snap\n    })\n    .catch(error => {\n      dispatch({ type: actionTypes.PROFILE_UPDATE_ERROR, error })\n      return Promise.reject(error)\n    })\n}\n\n/**\n * Update Auth Profile Object. Internally calls\n * `firebase.auth().currentUser.updateProfile` as seen [in the firebase docs](https://firebase.google.com/docs/auth/web/manage-users#update_a_users_profile).\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {object} authUpdate - Update for current user's auth profile\n * @param {boolean} updateInProfile - Whether or not to update in profile as well\n * @returns {Promise} Resolves with results of updating auth\n * @private\n */\nexport const updateAuth = (dispatch, firebase, authUpdate, updateInProfile) => {\n  dispatch({ type: actionTypes.AUTH_UPDATE_START, payload: authUpdate })\n\n  if (!firebase.auth().currentUser) {\n    const error = new Error('User must be logged in to update auth.')\n    dispatch({ type: actionTypes.AUTH_UPDATE_ERROR, payload: error })\n    return Promise.reject(error)\n  }\n\n  return firebase\n    .auth()\n    .currentUser.updateProfile(authUpdate)\n    .then(payload => {\n      dispatch({\n        type: actionTypes.AUTH_UPDATE_SUCCESS,\n        auth: firebase.auth().currentUser\n      })\n      if (updateInProfile) {\n        return updateProfile(dispatch, firebase, authUpdate)\n      }\n      return payload\n    })\n    .catch(error => {\n      dispatch({ type: actionTypes.AUTH_UPDATE_ERROR, error })\n      return Promise.reject(error)\n    })\n}\n\n/**\n * Update user's email within Firebase auth and optionally within\n * users's profile. Internally calls `firebase.auth().currentUser.updateEmail`.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {string} newEmail - Update to be auth object\n * @param {boolean} updateInProfile - Whether or not to update email within\n * user's profile object (stored under path provided to userProfile config)\n * @returns {Promise} Resolves with results of updating email\n * @private\n */\nexport const updateEmail = (dispatch, firebase, newEmail, updateInProfile) => {\n  dispatch({ type: actionTypes.EMAIL_UPDATE_START, payload: newEmail })\n\n  if (!firebase.auth().currentUser) {\n    const error = new Error('User must be logged in to update email.')\n    dispatch({ type: actionTypes.EMAIL_UPDATE_ERROR, error })\n    return Promise.reject(error)\n  }\n\n  return firebase\n    .auth()\n    .currentUser.updateEmail(newEmail)\n    .then(payload => {\n      dispatch({ type: actionTypes.EMAIL_UPDATE_SUCCESS, payload: newEmail })\n      if (updateInProfile) {\n        return updateProfile(dispatch, firebase, { email: newEmail })\n      }\n      return payload\n    })\n    .catch(error => {\n      dispatch({ type: actionTypes.EMAIL_UPDATE_ERROR, error })\n      return Promise.reject(error)\n    })\n}\n\n/**\n * Reload Auth state. Internally calls\n * `firebase.auth().currentUser.reload`.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @returns {Promise} Resolves with auth\n */\nexport const reloadAuth = (dispatch, firebase) => {\n  dispatch({ type: actionTypes.AUTH_RELOAD_START })\n\n  // reject and dispatch error if not logged in\n  if (!firebase.auth().currentUser) {\n    const error = new Error('User must be logged in to reload auth.')\n    dispatch({ type: actionTypes.AUTH_RELOAD_ERROR, error })\n    return Promise.reject(error)\n  }\n\n  return firebase\n    .auth()\n    .currentUser.reload()\n    .then(() => {\n      const auth = firebase.auth().currentUser\n      dispatch({ type: actionTypes.AUTH_RELOAD_SUCCESS, payload: auth })\n      return auth\n    })\n    .catch(error => {\n      dispatch({ type: actionTypes.AUTH_RELOAD_ERROR, error })\n      return Promise.reject(error)\n    })\n}\n\n/**\n * Links the user account with the given credentials. Internally\n * calls `firebase.auth().currentUser.linkWithCredential`.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {object} credential - Credential with which to link user account\n * @returns {Promise} Resolves with auth\n */\nexport const linkWithCredential = (dispatch, firebase, credential) => {\n  dispatch({ type: actionTypes.AUTH_LINK_START })\n\n  // reject and dispatch error if not logged in\n  if (!firebase.auth().currentUser) {\n    const error = new Error('User must be logged in to link with credential.')\n    dispatch({ type: actionTypes.AUTH_LINK_ERROR, error })\n    return Promise.reject(error)\n  }\n\n  return firebase\n    .auth()\n    .currentUser.linkWithCredential(credential)\n    .then(auth => {\n      dispatch({ type: actionTypes.AUTH_LINK_SUCCESS, payload: auth })\n      return auth\n    })\n    .catch(error => {\n      dispatch({ type: actionTypes.AUTH_LINK_ERROR, error })\n      return Promise.reject(error)\n    })\n}\n\n/**\n * @param {Function} promiseFunc - Promise function\n * @param {Array} args - arguments to pass to function\n * @param {Function} dispatch - Redux dispatch function\n * @param {object} firebase - Internal firebase object\n * @returns {Promise} Resolves after auth is linked and AUTH_LINK_SUCCESS\n * action is dispatched\n */\nfunction linkWithAuthDispatch(promiseFunc, args, dispatch, firebase) {\n  dispatch({ type: actionTypes.AUTH_LINK_START })\n\n  // reject and dispatch error if not logged in\n  if (!firebase.auth().currentUser) {\n    const error = new Error('User must be logged in to link with credential.')\n    dispatch({ type: actionTypes.AUTH_LINK_ERROR, error })\n    return Promise.reject(error)\n  }\n\n  return promiseFunc(...args)\n    .then(auth => {\n      dispatch({ type: actionTypes.AUTH_LINK_SUCCESS, payload: auth })\n      return auth\n    })\n    .catch(error => {\n      dispatch({ type: actionTypes.AUTH_LINK_ERROR, error })\n      return Promise.reject(error)\n    })\n}\n\n/**\n * Links the user account with the given credentials. Internally\n * calls `firebase.auth().currentUser.linkAndRetrieveDataWithCredential`.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {object} credential - Credential with which to link user account\n * @returns {Promise} Resolves with auth\n */\nexport function linkAndRetrieveDataWithCredential(\n  dispatch,\n  firebase,\n  credential\n) {\n  return linkWithAuthDispatch(\n    firebase.auth().currentUser.linkAndRetrieveDataWithCredential,\n    [credential],\n    dispatch,\n    firebase\n  )\n}\n\n/**\n * Links the user account with the given credentials. Internally\n * calls `firebase.auth().currentUser.linkWithPopup`.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {object} credential - Credential with which to link user account\n * @returns {Promise} Resolves with auth\n */\nexport function linkWithPopup(dispatch, firebase, credential) {\n  return linkWithAuthDispatch(\n    firebase.auth().currentUser.linkWithPopup,\n    [credential],\n    dispatch,\n    firebase\n  )\n}\n\n/**\n * Links the user account with the given credentials. Internally\n * calls `firebase.auth().currentUser.linkWithRedirect`.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {any} provider - Auth provider\n * @returns {Promise} Resolves with auth\n */\nexport function linkWithRedirect(dispatch, firebase, provider) {\n  return linkWithAuthDispatch(\n    firebase.auth().currentUser.linkWithRedirect,\n    [provider],\n    dispatch,\n    firebase\n  )\n}\n\n/**\n * Asynchronously signs in using a phone number and create's\n * user profile. This method sends a code via SMS to the given phone\n * number, and returns a firebase.auth.ConfirmationResult. Internally\n * calls `firebase.auth().signInWithPhoneNumber`.\n * @param {object} firebase - Internal firebase object\n * @param {Function} dispatch - Action dispatch function\n * @param {string} phoneNumber - Phone number\n * @param {object} applicationVerifier - Phone number\n * @param {object} options - Options object\n * @returns {Promise} Resolves with auth\n */\nexport function signInWithPhoneNumber(\n  firebase,\n  dispatch,\n  phoneNumber,\n  applicationVerifier,\n  options = {}\n) {\n  return login(dispatch, firebase, {\n    phoneNumber,\n    applicationVerifier,\n    ...options\n  })\n}\n"],"file":"auth.js"}